import java.util.*;

public class DIGrafo extends Grafo {
	
	public String id;
	public LinkedList<Vertice> cjtoVertices;
	public LinkedList<Lado> cjtoLados;
	public LinkedList<LinkedList<String>> listaDeAd;
	public int[][] matAdj;
	
	public DIGrafo() {
		id = "Digrafo";
		cjtoVertices = new LinkedList<Vertice>();
		cjtoLados = new LinkedList<Lado>();
		listaDeAd = new LinkedList<LinkedList<String>>();
	}
	
	public String Tipo() {
		return id;
	}
	
	public Grafo agregarVertice(Vertice v){
		boolean existe=false;
		for(int i=0;i<cjtoVertices.size()&&!existe;i++) existe=v.id.equals(cjtoVertices.get(i).id);
		if (!existe) this.cjtoVertices.addFirst(v);
		return this;
	}
	
	public Grafo eliminarVertice(Vertice v) {
		int i = cjtoVertices.indexOf(v);
		cjtoVertices.remove(i);
		return this;
	}
	
	public Grafo modificarVertice(Vertice v) {
		return this;
	}
	
	public int grado(Vertice v) {
		return this.incidentes(v).size();
	}
	
	public LinkedList<Vertice> Vertices() {
		return cjtoVertices;
	}
	
	public LinkedList<Lado> Lados() {
		return cjtoLados;
	}
	
	public Grafo agregarLado(Lado l) {
		cjtoLados.addFirst(l);
		return this;
	}
	
	public Grafo eliminarLado(Lado l) {
		int i=cjtoLados.indexOf(l.identificador());
		cjtoLados.remove(i);
		return this;
	}
	
	public Grafo modificarLado(Lado l) {
		return this;
	}
	
	public LinkedList<LinkedList<Vertice>> adyacentes(Vertice v) {
		return null;
	}
	
	public LinkedList<Lado> incidentes(Vertice v) {
		return null;
	}
	
	public Grafo agregarArco(Arco a) {
		return this;
	}
	
	public Grafo eliminaArco(Arco a) {
		return this;
	}
	
	public Grafo modificarArco(Arco a) {
		return this;
	}
	
	public int gradoInt(Vertice v) {
		return 0;
	}
	
	public int gradoExt(Vertice v) {
		return 0;
	}
	
	public LinkedList<Vertice> sucesores(Vertice v) {
		return null;
	}
	
	public LinkedList<Vertice> predecesores(Vertice v) {
		return null;
	}
	
}
