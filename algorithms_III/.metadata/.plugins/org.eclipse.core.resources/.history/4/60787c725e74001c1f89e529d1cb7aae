import java.util.*;

public class NDGrafo extends Grafo {
	
	public String id;
	public LinkedList<Vertice> cjtoVertices;
	public LinkedList<Lado> cjtoLados;
	public LinkedList<LinkedList<String>> listaDeAd;
	
	public NDGrafo() {
		id = "NDgrafo";
		cjtoVertices = new LinkedList<Vertice>();
		cjtoLados = new LinkedList<Lado>();
		listaDeAd = new LinkedList<LinkedList<String>>();
	}
	
	public String Tipo() {
		return id;
	}
	
	public Grafo agregarVertice(Vertice v){
		boolean existe=false;
		for(int i=0;i<cjtoVertices.size()&&!existe;i++) existe=v.id.equals(cjtoVertices.get(i).id);
		if (!existe) this.cjtoVertices.addFirst(v);
		return this;
	}
	
	public Grafo eliminarVertice(Vertice v) {
		int i = cjtoVertices.indexOf(v);
		cjtoVertices.remove(i);
		LinkedList<Lado> list=incidentes(v);
		for(int j=0;j<list.size();j++) {
			System.out.println("va a eliminar el lado: "+list.get(j).identificador());
			eliminarLado(list.get(j));
		}
		return this;
	}
	
	public Grafo modificarVertice(Vertice v) {
		return this;
	}
	
	public int grado(Vertice v) {
		int grado = v.cjtoLadosIncd.size();
		return grado;
	}
	
	public LinkedList<Vertice> Vertices() {
		return cjtoVertices;
	}
	
	public LinkedList<Lado> Lados() {
		return cjtoLados;
	}
	
	public Grafo agregarLado(Lado l) {
		this.cjtoLados.addFirst(l);
		return this;
	}
	
	public Grafo eliminarLado(Lado l) {
		int i=cjtoLados.indexOf(l);
		cjtoLados.remove(i);
		return this;
	}
	
	public Grafo modificarLado(Lado l) {
		return this;
	}
	
	public LinkedList<LinkedList<Vertice>> adyacentes(Vertice v) {
		return null;
	}
	
	public LinkedList<Lado> incidentes(Vertice v) {
		LinkedList<Lado> lados = this.Lados();
		LinkedList<Lado> ladosInc = new LinkedList<Lado>();
		for (int i = 0;i<lados.size();i++){
			if (lados.get(i).vertIni()==v||lados.get(i).vertFin()==v)
				ladosInc.addFirst(lados.get(i));
		}
	
		return ladosInc;
	}
	
}
