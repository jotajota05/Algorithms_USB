public class GraphMatrizAdj extends Graph 
{
    private int Vcnt, Ecnt;
    private boolean digraph;
    private boolean adj[][];

    public GraphMatrizAdj(int V, boolean flag){
        Vcnt = V; 
	Ecnt = 0; 
	digraph = flag;
        adj = new boolean[V][V];
    }
    
    public int V() { return Vcnt; }
    
    public  int E() { return Ecnt; }
    
    public boolean directed() { return digraph; }
    
    public void insert(Edge e){ 
	int v = e.v, w = e.w;
        if (adj[v][w] == false) 
	    Ecnt++;
        adj[v][w] = true;
        if (!digraph) 
	    adj[w][v] = true; 
    } 
    
    public void remove(Edge e){ 
	int v = e.v, w = e.w;
        if (adj[v][w] == true) 
	    Ecnt--;
        adj[v][w] = false;
        if (!digraph) 
	    adj[w][v] = false; 
    } 
    
    private boolean edge(int v, int w){ 
	return adj[v][w]; 
    }
    
    public AdjList getAdjList(int v){ 
	return new AdjArray(v); 
    }
    
    private class AdjArray implements AdjList{
	private int i, v;
	
	AdjArray(int v){ 
	    this.v = v; 
	    i = -1;
	}
  
	public int beg(){ 
	    i = -1; 
	    return nxt(); 
	}
	    
	public int nxt(){
	    for (i++; i < V(); i++)
		if (edge(v, i) == true) 
		    return i;
	    return -1;
	}
	    
	public boolean end(){ 
	    return i >= V(); 
	}
    }
}
