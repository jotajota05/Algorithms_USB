
  
  
  import ve.usb.util.*;
  import ve.usb.util.tads.*;
    
  
  /** 
    Class generated by Gacela v2.6.2c Universidad Simón Bolívar, febrero de 2006	Lenguaje de Dijkstra de Comandos con Guardias con aserciones,	testing dinámico y herramientas de verificación.
  */  
  public class Agenda  {
  
  //Representation model
      final int MAX;
    String[][] fechaHNombre;
    int[][] duracionPrioridad;
    int tam;
  
  //Java contructor
  private Agenda (final int MAX, final String[][] fechaHNombre, final int[][] duracionPrioridad, final int tam) {
   	    this.MAX = MAX;
	    this.fechaHNombre = fechaHNombre;
	    this.duracionPrioridad = duracionPrioridad;
	    this.tam = tam;

    boolean __forall0 = true; 
    { 
      int _i = 0; 
      final int _max_i = tam; 
      // Invariante : __forall0 = %forall i: 0<i<_i : fechaHNombre[i][0] < fechaHNombre[i + 1][0] 
      // Cota       : tam - _i 
      while (_i<_max_i && __forall0) { 
        
      __forall0 = GclLib.__lt(fechaHNombre[_i][0],fechaHNombre[_i + 1][0]); 
        _i++; 
      } 
    // { __forall0 = %forall i: 0<i<tam : fechaHNombre[i][0] < fechaHNombre[i + 1][0] } 
    }
    boolean __forall1 = true; 
    { 
      int _i = 0; 
      final int _max_i = tam; 
      // Invariante : __forall1 = %forall i: 0<i<_i : 0 <= duracionPrioridad[i][1] / duracionPrioridad[i][1] <= 5 
      // Cota       : tam - _i 
      while (_i<_max_i && __forall1) { 
        
      __forall1 = 0 <= duracionPrioridad[_i][1] && duracionPrioridad[_i][1] <= 5; 
        _i++; 
      } 
    // { __forall1 = %forall i: 0<i<tam : 0 <= duracionPrioridad[i][1] / duracionPrioridad[i][1] <= 5 } 
    }
    boolean __forall2 = true; 
    { 
      int _i = 0; 
      final int _max_i = tam; 
      // Invariante : __forall2 = %forall i: 0<i<_i : duracionValida(fechaHNombre[i][0],duracionPrioridad[i][0]) 
      // Cota       : tam - _i 
      while (_i<_max_i && __forall2) { 
        
      __forall2 = duracionValida(fechaHNombre[_i][0],duracionPrioridad[_i][0]); 
        _i++; 
      } 
    // { __forall2 = %forall i: 0<i<tam : duracionValida(fechaHNombre[i][0],duracionPrioridad[i][0]) } 
    }
    boolean __forall3 = true; 
    { 
      int _i = 0; 
      final int _max_i = tam; 
      // Invariante : __forall3 = %forall i: 0<i<_i : fechaHoraValida(fechaHNombre[i][0]) 
      // Cota       : tam - _i 
      while (_i<_max_i && __forall3) { 
        
      __forall3 = fechaHoraValida(fechaHNombre[_i][0]); 
        _i++; 
      } 
    // { __forall3 = %forall i: 0<i<tam : fechaHoraValida(fechaHNombre[i][0]) } 
    }
    boolean __forall4 = true; 
    { 
      int _i = 0; 
      final int _max_i = tam; 
      // Invariante : __forall4 = %forall i: 0<i<_i : fechaHNombre[i][1] != \"\" 
      // Cota       : tam - _i 
      while (_i<_max_i && __forall4) { 
        
      __forall4 = GclLib.__neq(fechaHNombre[_i][1],""); 
        _i++; 
      } 
    // { __forall4 = %forall i: 0<i<tam : fechaHNombre[i][1] != \"\" } 
    }
    assert (0 <= tam && tam <= MAX) && MAX > 0 && GclLib.__eq(GclLib.__length(fechaHNombre,0),MAX) && GclLib.__eq(GclLib.__length(fechaHNombre,1),2) && GclLib.__eq(GclLib.__length(duracionPrioridad,0),MAX) && GclLib.__eq(GclLib.__length(duracionPrioridad,1),2) && __forall0 && __forall1 && __forall2 && __forall3 && __forall4 :__msg[0]; 
     
  //El inv. de representación de verifica aquí
  }  
    public static  Agenda nuevaAgenda (final int m) { 
    	 
      assert m > 0 :__msg[1]; 
       
    
      int __max5 = m;
      int __max6 = 2; 
      final String[][] __array7 = new String[__max5][__max6]; 
      for (int i = 0; i < __max5; i++) { 
      
      for (int j = 0; j < __max6; j++) { 
      
        __array7[i][j] = ""; 
      } 
       
      } 
      
      int __max8 = m;
      int __max9 = 2; 
      final int[][] __array10 = new int[__max8][__max9]; 
      for (int f = 0; f < __max8; f++) { 
      
      for (int c = 0; c < __max9; c++) { 
      
        __array10[f][c] = 0; 
      } 
       
      } 
      
      final Agenda _nuevaAgenda = new Agenda(m,__array7,__array10,0);  
      
      assert GclLib.__eq(_nuevaAgenda.MAX,m) && GclLib.__eq(_nuevaAgenda.tam,0) :__msg[2]; 
       
      return _nuevaAgenda; 
    }
  
    public static void agregarActividad (final Agenda a, final String fechaHora, final int duracion, final int prioridad, final String nombre) { 
    	 
      assert fechaHoraValida(fechaHora) && duracionValida(fechaHora,duracion) && (0 <= prioridad && prioridad <= 5) && GclLib.__neq(nombre,"") && a.tam < a.MAX && ! choca(a,fechaHora,duracion) :__msg[3]; 
       
        int i = 0;
/*(a.tam=a.tam+1)/*/    int j = 0;

      if (a.tam < a.MAX) {
 

            if (GclLib.__neq(a.fechaHNombre[0][1],"")) {
 

                /* { true } */

                  
                  while (i < a.tam) {
                  final int __C0 = a.tam - i;


                        if (GclLib.__lt(a.fechaHNombre[i][0],fechaHora)) {
 

                              i = i + 1;                           
                        } else {
                          assert GclLib.__ge(a.fechaHNombre[i][0],fechaHora) :__msg[7]; 
                          

                              j = i;
                            /* { true } */

                              
                              while (j < a.tam) {
                              final int __C1 = a.tam - j;


                                    a.fechaHNombre[j + 1][0] = a.fechaHNombre[j][0];
                                    a.fechaHNombre[j + 1][1] = a.fechaHNombre[j][1];
                                    a.duracionPrioridad[j + 1][0] = a.duracionPrioridad[j][0];
                                    a.duracionPrioridad[j + 1][1] = a.duracionPrioridad[j][1];
                                    j = j + 1;                                
                                assert GclLib.__GT(__C1,a.tam - j) :__msg[6]; 
                                 
                              }
                              a.fechaHNombre[i][0] = fechaHora;
                              a.fechaHNombre[i][1] = nombre;
                              a.duracionPrioridad[i][0] = duracion;
                              a.duracionPrioridad[i][1] = prioridad;
                              i = a.tam;                          
                        }
                    
                    assert GclLib.__GT(__C0,a.tam - i) :__msg[5]; 
                     
                  }
                  if (GclLib.__eq(a.fechaHNombre[a.tam][1],"")) {
 

                        a.fechaHNombre[a.tam][0] = fechaHora;
                        a.fechaHNombre[a.tam][1] = nombre;
                        a.duracionPrioridad[a.tam][0] = duracion;
                        a.duracionPrioridad[a.tam][1] = prioridad;
                        i = a.tam;                     
                  } else {
                    assert GclLib.__neq(a.fechaHNombre[a.tam][1],"") :__msg[8]; 
                    
                    
                  }
               
            } else {
              assert GclLib.__eq(a.fechaHNombre[0][1],"") :__msg[9]; 
              

                  a.fechaHNombre[0][0] = fechaHora;
                  a.fechaHNombre[0][1] = nombre;
                  a.duracionPrioridad[0][0] = duracion;
                  a.duracionPrioridad[0][1] = prioridad;
                  i = a.tam;              
            }

            a.tam = a.tam + 1;         
      } else {
        assert a.tam >= a.MAX :__msg[10]; 
        

          System.out.println ("La agenda ya esta llena.");        
      }
 
    
      boolean __exists11 = false; 
      { 
        int _i = 0; 
        final int _max_i = a.tam; 
        // Invariante : __exists11 = %exists i: 0<i<_i : a.fechaHNombre[i][0] = fechaHora / a.fechaHNombre[i][1] = nombre / a.duracionPrioridad[i][0] = duracion / a.duracionPrioridad[i][1] = prioridad 
        // Cota       : a.tam - _i 
        while (_i<_max_i && !(__exists11)) { 
          
        __exists11 = GclLib.__eq(a.fechaHNombre[_i][0],fechaHora) && GclLib.__eq(a.fechaHNombre[_i][1],nombre) && GclLib.__eq(a.duracionPrioridad[_i][0],duracion) && GclLib.__eq(a.duracionPrioridad[_i][1],prioridad); 
          _i++; 
        } 
      // { __exists11 = %exists i: 0<i<a.tam : a.fechaHNombre[i][0] = fechaHora / a.fechaHNombre[i][1] = nombre / a.duracionPrioridad[i][0] = duracion / a.duracionPrioridad[i][1] = prioridad } 
      }
      boolean __forall12 = true; 
      { 
        int _i = 0; 
        final int _max_i = a.tam; 
        // Invariante : __forall12 = %forall i: 0<i<_i : (%exists j:0<=j<a.tam:a.fechaHNombre[i][0] = a.fechaHNombre[j][0] / a.fechaHNombre[i][1] = a.fechaHNombre[j][1] / a.duracionPrioridad[i][0] = a.duracionPrioridad[j][0] / a.duracionPrioridad[i][1] = a.duracionPrioridad[j][1]) 
        // Cota       : a.tam - _i 
        while (_i<_max_i && __forall12) { 
          
        boolean __exists13 = false; 
        { 
          int _j = 0; 
          final int _max_j = a.tam; 
          // Invariante : __exists13 = %exists j: 0<j<_j : a.fechaHNombre[i][0] = a.fechaHNombre[j][0] / a.fechaHNombre[i][1] = a.fechaHNombre[j][1] / a.duracionPrioridad[i][0] = a.duracionPrioridad[j][0] / a.duracionPrioridad[i][1] = a.duracionPrioridad[j][1] 
          // Cota       : a.tam - _j 
          while (_j<_max_j && !(__exists13)) { 
            
          __exists13 = GclLib.__eq(a.fechaHNombre[_i][0],a.fechaHNombre[_j][0]) && GclLib.__eq(a.fechaHNombre[_i][1],a.fechaHNombre[_j][1]) && GclLib.__eq(a.duracionPrioridad[_i][0],a.duracionPrioridad[_j][0]) && GclLib.__eq(a.duracionPrioridad[_i][1],a.duracionPrioridad[_j][1]); 
            _j++; 
          } 
        // { __exists13 = %exists j: 0<j<a.tam : a.fechaHNombre[i][0] = a.fechaHNombre[j][0] / a.fechaHNombre[i][1] = a.fechaHNombre[j][1] / a.duracionPrioridad[i][0] = a.duracionPrioridad[j][0] / a.duracionPrioridad[i][1] = a.duracionPrioridad[j][1] } 
        }
        __forall12 = __exists13; 
          _i++; 
        } 
      // { __forall12 = %forall i: 0<i<a.tam : (%exists j:0<=j<a.tam:a.fechaHNombre[i][0] = a.fechaHNombre[j][0] / a.fechaHNombre[i][1] = a.fechaHNombre[j][1] / a.duracionPrioridad[i][0] = a.duracionPrioridad[j][0] / a.duracionPrioridad[i][1] = a.duracionPrioridad[j][1]) } 
      }
      assert __exists11 && __forall12 :__msg[4]; 
       
  }
  
    public static Agenda eliminarActividad (final Agenda _ini_a, final String fechaHora) { 
     Agenda a = _ini_a;
 	 
      boolean __exists14 = false; 
      { 
        int _i = 0; 
        final int _max_i = a.tam; 
        // Invariante : __exists14 = %exists i: 0<i<_i : a.fechaHNombre[i][0] = fechaHora 
        // Cota       : a.tam - _i 
        while (_i<_max_i && !(__exists14)) { 
          
        __exists14 = GclLib.__eq(a.fechaHNombre[_i][0],fechaHora); 
          _i++; 
        } 
      // { __exists14 = %exists i: 0<i<a.tam : a.fechaHNombre[i][0] = fechaHora } 
      }
      assert __exists14 :__msg[11]; 
       
        int i = 0;
    int j = 0;

      if (a.tam <= 0) {
 

          System.out.println ("La agenda no contiene actividades");         
      } else {
        assert a.tam > 0 :__msg[15]; 
        

          /* { true } */

            
            while (i < a.tam) {
            final int __C2 = a.tam - i;


                  if (GclLib.__neq(a.fechaHNombre[i][0],fechaHora)) {
 

                        i = i + 1;                     
                  } else {
                    assert GclLib.__eq(a.fechaHNombre[i][0],fechaHora) :__msg[14]; 
                    

                        j = i;
                      /* { true } */

                        
                        while (j < a.tam - 1) {
                        final int __C3 = a.tam - j - 1;


                              a.fechaHNombre[j][0] = a.fechaHNombre[j + 1][0];
                              a.fechaHNombre[j][1] = a.fechaHNombre[j + 1][1];
                              a.duracionPrioridad[j][0] = a.duracionPrioridad[j + 1][0];
                              a.duracionPrioridad[j][1] = a.duracionPrioridad[j + 1][1];
                              j = j + 1;                          
                          assert GclLib.__GT(__C3,a.tam - j - 1) :__msg[13]; 
                           
                        }
                        i = a.tam;                    
                  }
              
              assert GclLib.__GT(__C2,a.tam - i) :__msg[12]; 
               
            }
            a.tam = a.tam - 1;        
      }

      final Agenda _eliminarActividad = a;  
       
      return _eliminarActividad; 
    }
  
    public static void listarActividades (final Agenda a, final String fecha) { 
    	 
      assert esFechaValida(GclLib.__intOfString(fecha)) :__msg[16]; 
       
        int i = 0;
/*{ post Esta escrita en pantalla la secuencia ordenada sin repeticiones formada por los elementos del conjunto
			{i : (0<=i<a.tam)/(fecha+"0600")<=a.fechaHNombre[i][0]<=(fecha+"2200"):
			(a.fechaHNombre[i][0],a.fechaHNombre[i][1],
			 a.duracionPrioridad[i][0],a.duracionPrioridad[i][1])}}*/    int j = 0;

      if (diaLibre(a,fecha)) {
 

          System.out.println ("No hay actividades programadas para ese dia");         
      } else {
        assert ! diaLibre(a,fecha) :__msg[20]; 
        

          /* { true } */

            
            while (i < a.tam) {
            final int __C4 = a.tam - i;


                  if (GclLib.__neq(obtenerFecha(a.fechaHNombre[i][0]),fecha)) {
 

                        i = i + 1;                     
                  } else {
                    assert GclLib.__eq(obtenerFecha(a.fechaHNombre[i][0]),fecha) :__msg[19]; 
                    

                      /* { true } */

                        
                        while (j < cantidadActDia(a,fecha)) {
                        final int __C5 = cantidadActDia(a,fecha) - j;


                            System.out.println (a.fechaHNombre[j][0] + " " + a.fechaHNombre[j][1]);
                              j = j + 1;                          
                          assert GclLib.__GT(__C5,cantidadActDia(a,fecha) - j) :__msg[18]; 
                           
                        }
                        i = a.tam;                    
                  }
              
              assert GclLib.__GT(__C4,a.tam - i) :__msg[17]; 
               
            }        
      }
 
     
  }
  
    public static  String buscarActividad (final Agenda a, final String fechaHora) { 
    	 
      assert fechaHoraValida(fechaHora) :__msg[21]; 
       
        int k = 0;
    String nombre = "";

    /* { true } */

      
      while (k < a.tam && GclLib.__neq(a.fechaHNombre[k][0],fechaHora)) {
      final int __C6 = a.tam - k + 1;


            k = k + 1;        
        assert GclLib.__GT(__C6,a.tam - k + 1) :__msg[22]; 
         
      }
      if (k < a.tam) {
 

            nombre = "La actividad programada es: " + a.fechaHNombre[k][1];         
      } else {
        assert k >= a.tam :__msg[23]; 
        

            nombre = "Para esta fecha no hay actividad asignada";        
      }

      final String _buscarActividad = nombre;  
       
      return _buscarActividad; 
    }
  
    public static Agenda incluirActividades (final Agenda _ini_a1, final Agenda a2) { 
     Agenda a1 = _ini_a1;
 	 
      boolean __exists15 = false; 
      { 
        int _i = 0; 
        final int _max_i = a1.tam; 
        // Invariante : __exists15 = %exists i: 0<i<_i : choca(a2,a1.fechaHNombre[i][0],a1.duracionPrioridad[i][0]) 
        // Cota       : a1.tam - _i 
        while (_i<_max_i && !(__exists15)) { 
          
        __exists15 = choca(a2,a1.fechaHNombre[_i][0],a1.duracionPrioridad[_i][0]); 
          _i++; 
        } 
      // { __exists15 = %exists i: 0<i<a1.tam : choca(a2,a1.fechaHNombre[i][0],a1.duracionPrioridad[i][0]) } 
      }
      assert ! __exists15 && a1.tam + a2.tam <= a1.MAX :__msg[24]; 
       
        int k = 0;
/*(a1.tam=a1.tam+a2.tam)/*/
    /* { true } */

      
      while (k < a2.tam) {
      final int __C7 = a2.tam - k;


          agregarActividad (a1,a2.fechaHNombre[k][0],a2.duracionPrioridad[k][0],a2.duracionPrioridad[k][1],a2.fechaHNombre[k][1]);
            k = k + 1;        
        assert GclLib.__GT(__C7,a2.tam - k) :__msg[25]; 
         
      }
      final Agenda _incluirActividades = a1;  
      
      boolean __forall16 = true; 
      { 
        int _k = 0; 
        final int _max_k = a2.tam; 
        // Invariante : __forall16 = %forall k: 0<k<_k : (%exists i:0<=i<a1.tam:a1.fechaHNombre[i][0] = a2.fechaHNombre[k][0] / a1.fechaHNombre[i][1] = a2.fechaHNombre[k][1] / a1.duracionPrioridad[i][0] = a2.duracionPrioridad[k][0] / a1.duracionPrioridad[i][1] = a2.duracionPrioridad[k][1]) 
        // Cota       : a2.tam - _k 
        while (_k<_max_k && __forall16) { 
          
        boolean __exists17 = false; 
        { 
          int _i = 0; 
          final int _max_i = a1.tam; 
          // Invariante : __exists17 = %exists i: 0<i<_i : a1.fechaHNombre[i][0] = a2.fechaHNombre[k][0] / a1.fechaHNombre[i][1] = a2.fechaHNombre[k][1] / a1.duracionPrioridad[i][0] = a2.duracionPrioridad[k][0] / a1.duracionPrioridad[i][1] = a2.duracionPrioridad[k][1] 
          // Cota       : a1.tam - _i 
          while (_i<_max_i && !(__exists17)) { 
            
          __exists17 = GclLib.__eq(a1.fechaHNombre[_i][0],a2.fechaHNombre[_k][0]) && GclLib.__eq(a1.fechaHNombre[_i][1],a2.fechaHNombre[_k][1]) && GclLib.__eq(a1.duracionPrioridad[_i][0],a2.duracionPrioridad[_k][0]) && GclLib.__eq(a1.duracionPrioridad[_i][1],a2.duracionPrioridad[_k][1]); 
            _i++; 
          } 
        // { __exists17 = %exists i: 0<i<a1.tam : a1.fechaHNombre[i][0] = a2.fechaHNombre[k][0] / a1.fechaHNombre[i][1] = a2.fechaHNombre[k][1] / a1.duracionPrioridad[i][0] = a2.duracionPrioridad[k][0] / a1.duracionPrioridad[i][1] = a2.duracionPrioridad[k][1] } 
        }
        __forall16 = __exists17; 
          _k++; 
        } 
      // { __forall16 = %forall k: 0<k<a2.tam : (%exists i:0<=i<a1.tam:a1.fechaHNombre[i][0] = a2.fechaHNombre[k][0] / a1.fechaHNombre[i][1] = a2.fechaHNombre[k][1] / a1.duracionPrioridad[i][0] = a2.duracionPrioridad[k][0] / a1.duracionPrioridad[i][1] = a2.duracionPrioridad[k][1]) } 
      }
      boolean __forall18 = true; 
      { 
        int _i = 0; 
        final int _max_i = a1.tam; 
        // Invariante : __forall18 = %forall i: 0<i<_i : (%exists j:0<=j<a2.tam:a1.fechaHNombre[i][0] = a1.fechaHNombre[j][0] / a1.fechaHNombre[i][1] = a1.fechaHNombre[j][1] / a1.duracionPrioridad[i][0] = a1.duracionPrioridad[j][0] / a1.duracionPrioridad[i][1] = a1.duracionPrioridad[j][1]) 
        // Cota       : a1.tam - _i 
        while (_i<_max_i && __forall18) { 
          
        boolean __exists19 = false; 
        { 
          int _j = 0; 
          final int _max_j = a2.tam; 
          // Invariante : __exists19 = %exists j: 0<j<_j : a1.fechaHNombre[i][0] = a1.fechaHNombre[j][0] / a1.fechaHNombre[i][1] = a1.fechaHNombre[j][1] / a1.duracionPrioridad[i][0] = a1.duracionPrioridad[j][0] / a1.duracionPrioridad[i][1] = a1.duracionPrioridad[j][1] 
          // Cota       : a2.tam - _j 
          while (_j<_max_j && !(__exists19)) { 
            
          __exists19 = GclLib.__eq(a1.fechaHNombre[_i][0],a1.fechaHNombre[_j][0]) && GclLib.__eq(a1.fechaHNombre[_i][1],a1.fechaHNombre[_j][1]) && GclLib.__eq(a1.duracionPrioridad[_i][0],a1.duracionPrioridad[_j][0]) && GclLib.__eq(a1.duracionPrioridad[_i][1],a1.duracionPrioridad[_j][1]); 
            _j++; 
          } 
        // { __exists19 = %exists j: 0<j<a2.tam : a1.fechaHNombre[i][0] = a1.fechaHNombre[j][0] / a1.fechaHNombre[i][1] = a1.fechaHNombre[j][1] / a1.duracionPrioridad[i][0] = a1.duracionPrioridad[j][0] / a1.duracionPrioridad[i][1] = a1.duracionPrioridad[j][1] } 
        }
        __forall18 = __exists19; 
          _i++; 
        } 
      // { __forall18 = %forall i: 0<i<a1.tam : (%exists j:0<=j<a2.tam:a1.fechaHNombre[i][0] = a1.fechaHNombre[j][0] / a1.fechaHNombre[i][1] = a1.fechaHNombre[j][1] / a1.duracionPrioridad[i][0] = a1.duracionPrioridad[j][0] / a1.duracionPrioridad[i][1] = a1.duracionPrioridad[j][1]) } 
      }
      assert __forall16 && __forall18 :__msg[26]; 
       
      return _incluirActividades; 
    }
  
    public static void listarActividadesImportantes (final Agenda a, final String fecha, final int prioridad) { 
    	 
      assert esFechaValida(GclLib.__intOfString(fecha)) && 0 <= prioridad && prioridad <= 5 :__msg[27]; 
       
        int k = 0;
/*{post //Esta escrita en pantalla la secuencia ordenada sin repeticionesformada por los elementos del conjunto
		 {i : (0<=i<a.tam)/(fecha + 0600)<=a.fechaHNombre[i][0]<=(fecha+"2200")/
		 (a.duracionPrioridad[i][1]<=prioridad):
		 (a.fechaHNombre[i][0], a.fechaHNombre[i][1],a.duracionPrioridad[i][0],a.duracionPrioridad[i][1])}}*/    int j = 0;

    /* { true } */

      
      while (k < a.tam) {
      final int __C8 = a.tam - k;


            if (GclLib.__neq(obtenerFecha(a.fechaHNombre[k][0]),fecha)) {
 

                  k = k + 1;               
            } else {
              assert GclLib.__eq(obtenerFecha(a.fechaHNombre[k][0]),fecha) :__msg[31]; 
              

                  j = k;
                /* { true } */

                  
                  while (j < cantidadActDia(a,fecha)) {
                  final int __C9 = cantidadActDia(a,fecha) - j;


                        if (a.duracionPrioridad[j][1] <= prioridad) {
 

                            System.out.println (a.fechaHNombre[j][0] + " " + a.fechaHNombre[j][1]);                           
                        } else {
                          assert a.duracionPrioridad[j][1] > prioridad :__msg[30]; 
                          
                          
                        }

                        j = j + 1;                    
                    assert GclLib.__GT(__C9,cantidadActDia(a,fecha) - j) :__msg[29]; 
                     
                  }
                  k = a.tam;              
            }
        
        assert GclLib.__GT(__C8,a.tam - k) :__msg[28]; 
         
      } 
     
  }
  
    public static void listarActividadesPorPrioridad (final Agenda a) { 
    	 
    /* { true } */
 
        int k = 0;
/*{post //Esta escrita en pantalla la secuencia ordenada sin repeticionesformada por los elementos del conjunto
		 {i : 0<=i<a.tam : (a.duracionPrioridad[i][1],a.fechaHNombre[i][0],
		 a.fechaHNombre[i][1],a.duracionPrioridad[i][0])}}*/    int prioridad = 0;

    /* { true } */

      
      while (prioridad < 6) {
      final int __C10 = 6 - prioridad;


          /* { true } */

            
            while (k < a.tam) {
            final int __C11 = a.tam - k;


                  if (GclLib.__eq(a.duracionPrioridad[k][1],prioridad)) {
 

                      System.out.println (a.fechaHNombre[k][0] + " " + a.fechaHNombre[k][1]);                     
                  } else {
                    assert GclLib.__neq(a.duracionPrioridad[k][1],prioridad) :__msg[34]; 
                    
                    
                  }

                  k = k + 1;              
              assert GclLib.__GT(__C11,a.tam - k) :__msg[33]; 
               
            }
            prioridad = prioridad + 1;
            k = 0;        
        assert GclLib.__GT(__C10,6 - prioridad) :__msg[32]; 
         
      } 
     
  }
  
    public static  int cantidadActividades (final Agenda a) { 
    	 
    /* { true } */
 
    
      final int _cantidadActividades = a.tam;  
      
      assert GclLib.__eq(_cantidadActividades,a.tam) :__msg[35]; 
       
      return _cantidadActividades; 
    }
  
    public static  int cantidadActDia (final Agenda a, final String fecha) { 
    	 
      assert esFechaValida(GclLib.__intOfString(fecha)) :__msg[36]; 
       
        int k = 0;
    int cantidad = 0;

    /* { true } */

      
      while (k < a.tam) {
      final int __C12 = a.tam - k;


            if (GclLib.__eq(obtenerFecha(a.fechaHNombre[k][0]),fecha)) {
 

                  cantidad = cantidad + 1;               
            } else {
              assert GclLib.__neq(obtenerFecha(a.fechaHNombre[k][0]),fecha) :__msg[38]; 
              
              
            }

            k = k + 1;        
        assert GclLib.__GT(__C12,a.tam - k) :__msg[37]; 
         
      }
      final int _cantidadActDia = cantidad;  
      
      int __count20 = 0; 
      { 
        int _i = 0; 
        final int _max_i = a.tam; 
        // Invariante : __count20 = %count i: 0<i<_i : obtenerFecha(a.fechaHNombre[i][0]) = fecha 
        // Cota       : a.tam - _i 
        while (_i<_max_i) { 
          
        if (GclLib.__eq(obtenerFecha(a.fechaHNombre[_i][0]),fecha)) __count20++; 
          _i++; 
        } 
      // { __count20 = %count i: 0<i<a.tam : obtenerFecha(a.fechaHNombre[i][0]) = fecha } 
      }
      assert GclLib.__eq(_cantidadActDia,__count20) :__msg[39]; 
       
      return _cantidadActDia; 
    }
  
    public static  boolean diaLibre (final Agenda a, final String fecha) { 
    	 
      assert esFechaValida(GclLib.__intOfString(fecha)) :__msg[40]; 
       
        int k = 0;
    boolean libre = true;

    /* { true } */

      
      while (k < a.tam) {
      final int __C13 = a.tam - k;


            if (GclLib.__neq(fecha,obtenerFecha(a.fechaHNombre[k][0]))) {
 

                  k = k + 1;               
            } else {
              assert GclLib.__eq(fecha,obtenerFecha(a.fechaHNombre[k][0])) :__msg[42]; 
              

                  libre = false;
                  k = a.tam;              
            }
        
        assert GclLib.__GT(__C13,a.tam - k) :__msg[41]; 
         
      }
      final boolean _diaLibre = libre;  
      
      boolean __forall21 = true; 
      { 
        int _i = 0; 
        final int _max_i = a.tam; 
        // Invariante : __forall21 = %forall i: 0<i<_i : fecha != obtenerFecha(a.fechaHNombre[i][0]) 
        // Cota       : a.tam - _i 
        while (_i<_max_i && __forall21) { 
          
        __forall21 = GclLib.__neq(fecha,obtenerFecha(a.fechaHNombre[_i][0])); 
          _i++; 
        } 
      // { __forall21 = %forall i: 0<i<a.tam : fecha != obtenerFecha(a.fechaHNombre[i][0]) } 
      }
      assert GclLib.__eq(_diaLibre,__forall21) :__msg[43]; 
       
      return _diaLibre; 
    }
  
    public static  boolean duracionValida (final String fh, final int d) { 
    	 
    /* { true } */
 
        boolean valida = false;

      if (fechaHoraValida(fh)) {
 

            if (0 < d) {
 

                  if (GclLib.__le(GclLib.__substring(fin(fh,d),8,12),"2200")) {
 

                        valida = true;                     
                  } else {
                    assert GclLib.__gt(GclLib.__substring(fin(fh,d),8,12),"2200") :__msg[44]; 
                    
                    
                  }
               
            } else {
              assert d < 0 :__msg[45]; 
              
              
            }
         
      } else {
        assert ! fechaHoraValida(fh) :__msg[46]; 
        
        
      }

      final boolean _duracionValida = valida;  
      
      assert GclLib.__eq(_duracionValida,fechaHoraValida(fh) && d > 0 && GclLib.__mod(obtenerMinutos(fh) + d,60) + (GclLib.__div(obtenerMinutos(fh) + d,60) + obtenerHora(fh)) * 100 <= 2200) :__msg[47]; 
       
      return _duracionValida; 
    }
  
    public static  boolean fechaHoraValida (final String fh) { 
    	 
    /* { true } */
 
        boolean valida = false;

      if (GclLib.__neq(GclLib.__length(fh),12)) {
 
         
      } else {
        assert GclLib.__eq(GclLib.__length(fh),12) :__msg[50]; 
        

            {
 
            boolean __forall22 = true; 
            { 
              int _j = 0; 
              final int _max_j = GclLib.__length(fh); 
              // Invariante : __forall22 = %forall j: 0<j<_j : \"0\" <= substring(fh,j,j + 1) / substring(fh,j,j + 1) <= \"9\" 
              // Cota       : GclLib.__length(fh) - _j 
              while (_j<_max_j && __forall22) { 
                
              __forall22 = GclLib.__le("0",GclLib.__substring(fh,_j,_j + 1)) && GclLib.__le(GclLib.__substring(fh,_j,_j + 1),"9"); 
                _j++; 
              } 
            // { __forall22 = %forall j: 0<j<GclLib.__length(fh) : \"0\" <= substring(fh,j,j + 1) / substring(fh,j,j + 1) <= \"9\" } 
            } 
              if (__forall22) {
 
                int fecha = GclLib.__intOfString(GclLib.__substring(fh,0,8));
                int hora = GclLib.__intOfString(GclLib.__substring(fh,8,12));

                  if (esFechaValida(fecha) && esHoraValida(hora)) {
 

                        valida = true;                     
                  } else {
                    assert ! esFechaValida(fecha) || ! esHoraValida(hora) :__msg[48]; 
                    
                    
                  }
               
              } else {
                boolean __exists23 = false; 
                { 
                  int _j = 0; 
                  final int _max_j = GclLib.__length(fh); 
                  // Invariante : __exists23 = %exists j: 0<j<_j : substring(fh,j,j + 1) < \"0\" / substring(fh,j,j + 1) > \"9\" 
                  // Cota       : GclLib.__length(fh) - _j 
                  while (_j<_max_j && !(__exists23)) { 
                    
                  __exists23 = GclLib.__lt(GclLib.__substring(fh,_j,_j + 1),"0") || GclLib.__gt(GclLib.__substring(fh,_j,_j + 1),"9"); 
                    _j++; 
                  } 
                // { __exists23 = %exists j: 0<j<GclLib.__length(fh) : substring(fh,j,j + 1) < \"0\" / substring(fh,j,j + 1) > \"9\" } 
                }
                assert __exists23 :__msg[49]; 
                
                
              }
 
            }        
      }

      final boolean _fechaHoraValida = valida;  
      
      boolean __forall24 = true; 
      { 
        int _j = 0; 
        final int _max_j = GclLib.__length(fh); 
        // Invariante : __forall24 = %forall j: 0<j<_j : \"0\" <= substring(fh,j,j + 1) / substring(fh,j,j + 1) <= \"9\" 
        // Cota       : GclLib.__length(fh) - _j 
        while (_j<_max_j && __forall24) { 
          
        __forall24 = GclLib.__le("0",GclLib.__substring(fh,_j,_j + 1)) && GclLib.__le(GclLib.__substring(fh,_j,_j + 1),"9"); 
          _j++; 
        } 
      // { __forall24 = %forall j: 0<j<GclLib.__length(fh) : \"0\" <= substring(fh,j,j + 1) / substring(fh,j,j + 1) <= \"9\" } 
      }
      assert GclLib.__eq(_fechaHoraValida,GclLib.__eq(GclLib.__length(fh),12) && __forall24 && esHoraValida(GclLib.__intOfString(GclLib.__substring(fh,8,12))) && esFechaValida(GclLib.__intOfString(GclLib.__substring(fh,0,8)))) :__msg[51]; 
       
      return _fechaHoraValida; 
    }
  
    public static  boolean esFechaValida (final int f) { 
    	 
    /* { true } */
 
    
      final boolean _esFechaValida = (1 <= GclLib.__mod(f,100) && GclLib.__mod(f,100) <= 30) && (1 <= GclLib.__mod(GclLib.__div(f,100),100) && GclLib.__mod(GclLib.__div(f,100),100) <= 12) && GclLib.__div(f,10000) >= 2007;  
      
      assert GclLib.__eq(_esFechaValida,(1 <= GclLib.__mod(f,100) && GclLib.__mod(f,100) <= 30) && (1 <= GclLib.__mod(GclLib.__div(f,100),100) && GclLib.__mod(GclLib.__div(f,100),100) <= 12) && GclLib.__div(f,10000) >= 2007) :__msg[52]; 
       
      return _esFechaValida; 
    }
  
    public static  boolean esHoraValida (final int h) { 
    	 
    /* { true } */
 
    
      final boolean _esHoraValida = (6 <= GclLib.__div(h,100) && GclLib.__div(h,100) <= 21) && 0 <= GclLib.__mod(h,100) && GclLib.__mod(h,100) <= 59 || GclLib.__eq(GclLib.__div(h,100),22) && GclLib.__eq(GclLib.__mod(h,100),0);  
      
      assert GclLib.__eq(_esHoraValida,(6 <= GclLib.__div(h,100) && GclLib.__div(h,100) <= 21) && 0 <= GclLib.__mod(h,100) && GclLib.__mod(h,100) <= 59 || GclLib.__eq(GclLib.__div(h,100),22) && GclLib.__eq(GclLib.__mod(h,100),0)) :__msg[53]; 
       
      return _esHoraValida; 
    }
  
    public static  boolean esPrioridadValida (final int p) { 
    	 
    /* { true } */
 
    
      final boolean _esPrioridadValida = 0 <= p && p <= 5;  
      
      assert GclLib.__eq(_esPrioridadValida,0 <= p && p <= 5) :__msg[54]; 
       
      return _esPrioridadValida; 
    }
  
    public static  boolean seSolapan (final String fh1, final int d1, final String fh2, final int d2) { 
    	 
      assert fechaHoraValida(fh1) && fechaHoraValida(fh2) && d1 > 0 && d2 > 0 :__msg[55]; 
       
    
      final boolean _seSolapan = GclLib.__lt(fh1,fh2) && GclLib.__lt(fh2,fin(fh1,d1)) || GclLib.__eq(fh1,fh2) || GclLib.__lt(fh2,fh1) && GclLib.__lt(fh1,fin(fh2,d2));  
      
      assert GclLib.__eq(_seSolapan,GclLib.__lt(fh1,fh2) && GclLib.__lt(fh2,fin(fh1,d1)) || GclLib.__eq(fh1,fh2) || GclLib.__lt(fh2,fh1) && GclLib.__lt(fh1,fin(fh2,d2))) :__msg[56]; 
       
      return _seSolapan; 
    }
  
    public static  boolean choca (final Agenda a, final String fh, final int d) { 
    	 
      assert fechaHoraValida(fh) && d > 0 :__msg[57]; 
       
        int k = 0;
    boolean chocan = false;

    /* { true } */

      
      while (k < a.tam && ! chocan) {
      final int __C14 = a.tam - k;


            chocan = seSolapan(a.fechaHNombre[k][0],a.duracionPrioridad[k][0],fh,d);
            k = k + 1;        
        assert GclLib.__GT(__C14,a.tam - k) :__msg[58]; 
         
      }
      final boolean _choca = chocan;  
      
      boolean __exists25 = false; 
      { 
        int _x = 0; 
        final int _max_x = a.tam; 
        // Invariante : __exists25 = %exists x: 0<x<_x : seSolapan(a.fechaHNombre[x][0],a.duracionPrioridad[x][0],fh,d) 
        // Cota       : a.tam - _x 
        while (_x<_max_x && !(__exists25)) { 
          
        __exists25 = seSolapan(a.fechaHNombre[_x][0],a.duracionPrioridad[_x][0],fh,d); 
          _x++; 
        } 
      // { __exists25 = %exists x: 0<x<a.tam : seSolapan(a.fechaHNombre[x][0],a.duracionPrioridad[x][0],fh,d) } 
      }
      assert GclLib.__eq(_choca,__exists25) :__msg[59]; 
       
      return _choca; 
    }
  
    public static  int obtenerMinutos (final String fh) { 
    	 
    /* { true } */
 
    
      final int _obtenerMinutos = GclLib.__mod(GclLib.__intOfString(GclLib.__substring(fh,8,12)),100);  
      
      assert GclLib.__eq(_obtenerMinutos,GclLib.__mod(GclLib.__intOfString(GclLib.__substring(fh,8,12)),100)) :__msg[60]; 
       
      return _obtenerMinutos; 
    }
  
    public static  int obtenerHora (final String fh) { 
    	 
    /* { true } */
 
    
      final int _obtenerHora = GclLib.__div(GclLib.__intOfString(GclLib.__substring(fh,8,12)),100);  
      
      assert GclLib.__eq(_obtenerHora,GclLib.__div(GclLib.__intOfString(GclLib.__substring(fh,8,12)),100)) :__msg[61]; 
       
      return _obtenerHora; 
    }
  
    public static  String obtenerFecha (final String fh) { 
    	 
    /* { true } */
 
    
      final String _obtenerFecha = GclLib.__substring(fh,0,8);  
      
      assert GclLib.__eq(_obtenerFecha,GclLib.__substring(fh,0,8)) :__msg[62]; 
       
      return _obtenerFecha; 
    }
  
    public static  String fin (final String fh, final int d) { 
    	 
    /* { true } */
 
        String finall = "";
/*{post fin = substring(fh, 0, 8)+((obtenerHora(fh)+((obtenerMinutos(fh)+d) div 60)))<(10 => "0" | "")+
		  (((obtenerMinutos(fh) + d) mod 60)+(obtenerHora(fh) + ((obtenerMinutos(fh) + d) div 60))*100)}*/    int minn = obtenerMinutos(fh);
    int hora = obtenerHora(fh);
    int suma = d + minn;

      minn = GclLib.__mod(suma,60);
      hora = hora + GclLib.__div(suma,60);
      if (hora < 10) {
 

            finall = GclLib.__substring(fh,0,8) + "0" + (hora * 100 + minn);         
      } else {
        assert hora >= 10 :__msg[63]; 
        

            finall = GclLib.__substring(fh,0,8) + (hora * 100 + minn);        
      }

      final String _fin = finall;  
      
    /* { true } */
 
      return _fin; 
    }
  
    public static  boolean pertenece (final Agenda a, final String fh) { 
    	 
    /* { true } */
 
        boolean b = false;
    int i = 0;

      boolean __exists26 = false; 
      { 
        int _j = 0; 
        final int _max_j = a.tam; 
        // Invariante : __exists26 = %exists j: 0<j<_j : a.fechaHNombre[i][0] = fh 
        // Cota       : a.tam - _j 
        while (_j<_max_j && !(__exists26)) { 
          
        __exists26 = GclLib.__eq(a.fechaHNombre[i][0],fh); 
          _j++; 
        } 
      // { __exists26 = %exists j: 0<j<a.tam : a.fechaHNombre[i][0] = fh } 
      }
      boolean __exists27 = false; 
      { 
        int _j = 0; 
        final int _max_j = a.tam; 
        // Invariante : __exists27 = %exists j: 0<j<_j : a.fechaHNombre[i][0] = fh 
        // Cota       : a.tam - _j 
        while (_j<_max_j && !(__exists27)) { 
          
        __exists27 = GclLib.__eq(a.fechaHNombre[i][0],fh); 
          _j++; 
        } 
      // { __exists27 = %exists j: 0<j<a.tam : a.fechaHNombre[i][0] = fh } 
      }
      assert __exists26 || ! __exists27 :__msg[64]; 
      
      
      while (i < a.tam && ! b) {
      final int __C15 = a.tam - i;


            b = GclLib.__eq(a.fechaHNombre[i][0],fh);
            i = i + 1;        
        boolean __exists28 = false; 
        { 
          int _j = 0; 
          final int _max_j = a.tam; 
          // Invariante : __exists28 = %exists j: 0<j<_j : a.fechaHNombre[i][0] = fh 
          // Cota       : a.tam - _j 
          while (_j<_max_j && !(__exists28)) { 
            
          __exists28 = GclLib.__eq(a.fechaHNombre[i][0],fh); 
            _j++; 
          } 
        // { __exists28 = %exists j: 0<j<a.tam : a.fechaHNombre[i][0] = fh } 
        }
        boolean __exists29 = false; 
        { 
          int _j = 0; 
          final int _max_j = a.tam; 
          // Invariante : __exists29 = %exists j: 0<j<_j : a.fechaHNombre[i][0] = fh 
          // Cota       : a.tam - _j 
          while (_j<_max_j && !(__exists29)) { 
            
          __exists29 = GclLib.__eq(a.fechaHNombre[i][0],fh); 
            _j++; 
          } 
        // { __exists29 = %exists j: 0<j<a.tam : a.fechaHNombre[i][0] = fh } 
        }
        assert (__exists28 || ! __exists29) && GclLib.__GT(__C15,a.tam - i) :__msg[65]; 
         
      }
      final boolean _pertenece = b;  
      
      boolean __exists30 = false; 
      { 
        int _i = 0; 
        final int _max_i = a.tam; 
        // Invariante : __exists30 = %exists i: 0<i<_i : fh = a.fechaHNombre[i][0] 
        // Cota       : a.tam - _i 
        while (_i<_max_i && !(__exists30)) { 
          
        __exists30 = GclLib.__eq(fh,a.fechaHNombre[_i][0]); 
          _i++; 
        } 
      // { __exists30 = %exists i: 0<i<a.tam : fh = a.fechaHNombre[i][0] } 
      }
      assert GclLib.__eq(_pertenece,__exists30) :__msg[66]; 
       
      return _pertenece; 
    }
     
      public boolean equals (Object o) {
        if (o==null || !(o instanceof Agenda)) return false;        
        Agenda _Agenda = (Agenda)o;
        if (MAX != _Agenda.MAX) return false;
        if (!fechaHNombre.equals(_Agenda.fechaHNombre)) return false;
        if (!duracionPrioridad.equals(_Agenda.duracionPrioridad)) return false;
        if (tam != _Agenda.tam) return false;
        return true;
      }

      public String toString () {
        String res = "Agenda("+MAX + ", "+GclLib.arrayToString (fechaHNombre) + ", "+GclLib.arrayToString (duracionPrioridad) + ", "+tam+")";
        return res;
      }
   
  /** main method, called when executing this class as a program.
    * @param args External arguments (Not used).
    */
  public static void main (String[] args) {
    try {
      _Agenda();
    } catch (java.lang.AssertionError __ae) {
      System.out.println (__ae.getMessage ());
      System.out.print ("Escriba una línea para terminar :");
      try { System.in.read (); } catch (Exception __e) {}
    } catch (StackOverflowError __ae) {
      System.out.println ("Demasiadas llamadas recursivas");
      System.out.print ("Escriba una línea para terminar :");
      try { System.in.read (); } catch (Exception __e) {}
    } catch (Throwable __e) {
       __e.printStackTrace ();
    } finally {
      System.exit (0);
    }
  }
  
  public static void _Agenda() {
   
      System.out.println ("");
      System.out.println ("Buenos Dias. Bienvenido a USB Agenda Electrónica.");
      System.out.println ("");      final int N = GclLib.__readInt("Por favor inserte el numero de agendas que desea manejar. ");

      System.out.println ("");
      int __max31 = N; 
      final Agenda[] __array32 = new Agenda[__max31]; 
      for (int i = 0; i < __max31; i++) { 
      
        __array32[i] = nuevaAgenda(1); 
      } 
            Agenda[] Agendas = __array32;
      int k = 0;

      /* { true } */

        
        while (k < N) {
        final int __C16 = N - k + 1;


              Agendas[k] = nuevaAgenda(GclLib.__readInt("Ingrese el Tamano MAX de la Agenda: " + k));
              k = k + 1;          
          assert GclLib.__GT(__C16,N - k + 1) :__msg[67]; 
           
        }      int numAgenda = 0;
      int j = 0;
      int l = 0;
      int m = 0;
      String opcion = "";
      boolean bool = false;
      boolean validez = true;
      String nombre = "";
      String fh = "";
      int d = 0;
      int p = 0;
      boolean esta = true;

      /* { true } */

        
        while (k < 100000) {
        final int __C17 = 100000 - k;


              opcion = "";
            System.out.println ("");
              numAgenda = GclLib.__readInt("Introduzca el numero de la agenda con la que desea trabajar (0-" + (N - 1) + ")");
              l = 0;
            /* { true } */

              
              while (numAgenda < 0 || numAgenda >= N) {
              final int __C18 = 10 - l;


                  System.out.println ("No existe la Agenda " + numAgenda);
                    numAgenda = GclLib.__readInt("Introduzca el numero de una agenda existente.");
                    l = l + 1;                
                assert GclLib.__GT(__C18,10 - l) :__msg[69]; 
                 
              }
              l = 0;
            System.out.println ("");
            System.out.println ("Menu de opciones:");
            System.out.println ("");
            System.out.println ("1.-Agregar actividades.");
            System.out.println ("2.-Eliminar una actividad.");
            System.out.println ("3.-Obtener una lista de todas las actividades programadas para un dia.");
            System.out.println ("4.-Buscar una actividad dada la fecha y hora de su programación.");
            System.out.println ("5.-Incluir todas las actividades de la agenda en la programacion de otra.");
            System.out.println ("6.-Obtener una lista de las actividades de mayor prioridad en una día.");
            System.out.println ("7.-Obtener una lista de todas las actividades ordenadas de menor a mayor prioridad.");
            System.out.println ("8.-Verificar si un dia esta libre de actividades.");
            System.out.println ("9.-Obtener el numero de actividades programas en la agenda.");
            System.out.println ("10.-Obtener el numero de actividades programas en un dia.");
            System.out.println ("11.-Salir del Sistema.");
            System.out.println ("");
              opcion = GclLib.__readString("Introduzca el numero de su opcion.");
            System.out.println ("");
              if (GclLib.__eq(opcion,"1")) {
 

                    m = 0;
                  /* { true } */

                    
                    while (m < 10) {
                    final int __C19 = 10 - m;

                        int n = GclLib.__readInt("Inserte el numero de actividades que desea agregar: ");

                          if (n <= Agendas[numAgenda].MAX) {
 

                                m = 10;
                                j = 0;
                              /* { true } */

                                
                                while (j < n) {
                                final int __C20 = n - j;


                                      l = 0;
                                    /* { true } */

                                      
                                      while (l < 10) {
                                      final int __C21 = 10 - l;


                                            nombre = GclLib.__readString("Actividad: ");
                                            fh = GclLib.__readString("Fecha y Hora (aaaammddhhmm): ");
                                            d = GclLib.__readInt("Duracion en minutos: ");
                                            p = GclLib.__readInt("Prioridad: ");
                                          System.out.println ("");
                                            validez = fechaHoraValida(fh) && esPrioridadValida(p) && ! choca(Agendas[numAgenda],fh,d) && duracionValida(fh,d);
                                            if (validez) {
 

                                                agregarActividad (Agendas[numAgenda],fh,d,p,nombre);
                                                  j = j + 1;
                                                  l = 10;                                               
                                            } else {
                                              assert ! validez :__msg[73]; 
                                              

                                                System.out.println ("Algun dato es incompatible,vuelva a ingresarlos");
                                                  l = l + 1;                                              
                                            }
                                        
                                        assert GclLib.__GT(__C21,10 - l) :__msg[72]; 
                                         
                                      }                                  
                                  assert GclLib.__GT(__C20,n - j) :__msg[71]; 
                                   
                                }                             
                          } else {
                            assert n > Agendas[numAgenda].MAX :__msg[74]; 
                            

                              System.out.println ("No posee espacio para tantas actividades (Maximo = " + Agendas[numAgenda].MAX + ")");
                                m = m + 1;                            
                          }
                      
                      assert GclLib.__GT(__C19,10 - m) :__msg[70]; 
                       
                    }                 
              } else if (GclLib.__eq(opcion,"2")) {
 

                    l = 0;
                  /* { true } */

                    
                    while (l < 10) {
                    final int __C22 = 10 - l;


                          fh = GclLib.__readString("Fecha y Hora de la actividad que desea eliminar: ");
                          esta = pertenece(Agendas[numAgenda],fh);
                          if (esta) {
 

                                validez = fechaHoraValida(fh);
                                if (validez) {
 

                                    Agendas[numAgenda] = eliminarActividad (Agendas[numAgenda],fh);
                                      l = 10;                                   
                                } else {
                                  assert ! validez :__msg[76]; 
                                  

                                    System.out.println ("Algun dato es incompatible,vuelva a ingresarlos");
                                      l = l + 1;                                  
                                }
                             
                          } else {
                            assert ! esta :__msg[77]; 
                            

                              System.out.println ("Para la fecha que ingreso no existe actividad para eliminar");
                                l = l + 1;                            
                          }
                      
                      assert GclLib.__GT(__C22,10 - l) :__msg[75]; 
                       
                    }                 
              } else if (GclLib.__eq(opcion,"3")) {
 

                    l = 0;
                  /* { true } */

                    
                    while (l < 10) {
                    final int __C23 = 10 - l;


                          fh = GclLib.__readString("Fecha: ");
                          validez = esFechaValida(GclLib.__intOfString(fh));
                          if (validez) {
 

                              listarActividades (Agendas[numAgenda],fh);
                                l = 10;                             
                          } else {
                            assert ! validez :__msg[79]; 
                            

                              System.out.println ("Algun dato es incompatible,vuelva a ingresarlos");
                                l = l + 1;                            
                          }
                      
                      assert GclLib.__GT(__C23,10 - l) :__msg[78]; 
                       
                    }                 
              } else if (GclLib.__eq(opcion,"4")) {
 

                    l = 0;
                  /* { true } */

                    
                    while (l < 10) {
                    final int __C24 = 10 - l;


                          fh = GclLib.__readString("Fecha: ");
                          validez = fechaHoraValida(fh);
                          if (validez) {
 

                                nombre = buscarActividad(Agendas[numAgenda],fh);
                                l = 10;                             
                          } else {
                            assert ! validez :__msg[81]; 
                            

                              System.out.println ("Algun dato es incompatible,vuelva a ingresarlos");
                                l = l + 1;                            
                          }
                      
                      assert GclLib.__GT(__C24,10 - l) :__msg[80]; 
                       
                    }
                  System.out.println (nombre);                 
              } else if (GclLib.__eq(opcion,"5")) {
 

                    j = GclLib.__readInt("Inserte el numero de la agenda en cuya programacion desea incluir todas las actividades de la agenda actual.");
                  Agendas[j] = incluirActividades (Agendas[j],Agendas[numAgenda]);
                  System.out.println ("Las actividades de la agenda " + numAgenda + " han sido incluidas en la agenda " + j);                 
              } else if (GclLib.__eq(opcion,"6")) {
 

                    l = 0;
                  /* { true } */

                    
                    while (l < 10) {
                    final int __C25 = 10 - l;


                          fh = GclLib.__readString("Fecha: ");
                          p = GclLib.__readInt("Prioridad: ");
                          validez = esFechaValida(GclLib.__intOfString(fh)) && esPrioridadValida(p);
                          if (validez) {
 

                              listarActividadesImportantes (Agendas[numAgenda],fh,p);
                                l = 10;                             
                          } else {
                            assert ! validez :__msg[83]; 
                            

                              System.out.println ("Algun dato es incompatible,vuelva a ingresarlos");
                                l = l + 1;                            
                          }
                      
                      assert GclLib.__GT(__C25,10 - l) :__msg[82]; 
                       
                    }                 
              } else if (GclLib.__eq(opcion,"7")) {
 

                  listarActividadesPorPrioridad (Agendas[numAgenda]);                 
              } else if (GclLib.__eq(opcion,"8")) {
 

                    l = 0;
                  /* { true } */

                    
                    while (l < 10) {
                    final int __C26 = 10 - l;


                          fh = GclLib.__readString("Fecha: ");
                          validez = esFechaValida(GclLib.__intOfString(fh));
                          if (validez) {
 

                                bool = diaLibre(Agendas[numAgenda],fh);
                                if (GclLib.__eq(bool,true)) {
 

                                    System.out.println ("No hay actividades programadas en esta fecha.");                                   
                                } else {
                                  assert GclLib.__eq(bool,false) :__msg[85]; 
                                  

                                    System.out.println ("Este dia no esta libre de actividades.");                                  
                                }

                                l = 10;                             
                          } else {
                            assert ! validez :__msg[86]; 
                            

                              System.out.println ("Algun dato es incompatible,vuelva a ingresarlos");
                                l = l + 1;                            
                          }
                      
                      assert GclLib.__GT(__C26,10 - l) :__msg[84]; 
                       
                    }
                    bool = diaLibre(Agendas[numAgenda],fh);
                    if (GclLib.__eq(bool,true)) {
 

                        System.out.println ("No hay actividades programadas en esta fecha.");                       
                    } else {
                      assert GclLib.__eq(bool,false) :__msg[87]; 
                      

                        System.out.println ("Este dia no esta libre de actividades.");                      
                    }
                 
              } else if (GclLib.__eq(opcion,"9")) {
 

                    j = cantidadActividades(Agendas[numAgenda]);
                  System.out.println ("El numero de actividades programas en la agenda es " + j);                 
              } else if (GclLib.__eq(opcion,"10")) {
 

                    l = 0;
                  /* { true } */

                    
                    while (l < 10) {
                    final int __C27 = 10 - l;


                          fh = GclLib.__readString("Fecha: ");
                          validez = esFechaValida(GclLib.__intOfString(fh));
                          if (validez) {
 

                                j = cantidadActDia(Agendas[numAgenda],fh);
                                l = 10;                             
                          } else {
                            assert ! validez :__msg[89]; 
                            

                              System.out.println ("Algun dato es incompatible,vuelva a ingresarlos");
                                l = l + 1;                            
                          }
                      
                      assert GclLib.__GT(__C27,10 - l) :__msg[88]; 
                       
                    }
                  System.out.println ("El numero de actividades programas para ese dia es " + j);                 
              } else if (GclLib.__eq(opcion,"11")) {
 

                    opcion = GclLib.__readString("Esta seguro de que desea salir del programa?(S/N)");
                    if (GclLib.__eq(opcion,"s") || GclLib.__eq(opcion,"S")) {
 

                          k = 99999;                       
                    } else {
                      assert GclLib.__neq(opcion,"s") && GclLib.__neq(opcion,"S") :__msg[90]; 
                      
                      
                    }
                 
              } else {
                assert GclLib.__neq(opcion,"1") && GclLib.__neq(opcion,"2") && GclLib.__neq(opcion,"3") && GclLib.__neq(opcion,"4") && GclLib.__neq(opcion,"5") && GclLib.__neq(opcion,"6") && GclLib.__neq(opcion,"7") && GclLib.__neq(opcion,"8") && GclLib.__neq(opcion,"9") && GclLib.__neq(opcion,"10") && GclLib.__neq(opcion,"11") :__msg[91]; 
                

                  System.out.println ("Esa opcion no es valida.");                
              }

              k = k + 1;          
          assert GclLib.__GT(__C17,100000 - k) :__msg[68]; 
           
        }
  }   private final static String[] __msg = new String[] {
    "En la línea 13, \nel invariante de representación ((0 <= tam / tam <= MAX) / MAX > 0 / length(fechaHNombre,0) = MAX / length(fechaHNombre,1) = 2 / length(duracionPrioridad,0) = MAX / length(duracionPrioridad,1) = 2 / (%forall i:0<=i<tam:fechaHNombre[i][0] < fechaHNombre[i + 1][0]) / (%forall i:0<=i<tam:0 <= duracionPrioridad[i][1] / duracionPrioridad[i][1] <= 5) / (%forall i:0<=i<tam:duracionValida(fechaHNombre[i][0],duracionPrioridad[i][0])) / (%forall i:0<=i<tam:fechaHoraValida(fechaHNombre[i][0])) / (%forall i:0<=i<tam:fechaHNombre[i][1] != \"\")) \nno se cumple.",
    "En la línea 35, \nla precondición {m > 0} \nno se cumple.",
    "En la línea 38, \nla postcondición {nuevaAgenda.MAX = m / nuevaAgenda.tam = 0} \nno se cumple.",
    "En la línea 42, \nla precondición {fechaHoraValida(fechaHora) / duracionValida(fechaHora,duracion) / (0 <= prioridad / prioridad <= 5) / nombre != \"\" / a.tam < a.MAX / ! choca(a,fechaHora,duracion)} \nno se cumple.",
    "En la línea 42, \nla postcondición {(%exists i:0<=i<a.tam:a.fechaHNombre[i][0] = fechaHora / a.fechaHNombre[i][1] = nombre / a.duracionPrioridad[i][0] = duracion / a.duracionPrioridad[i][1] = prioridad) / (%forall i:0<=i<a.tam:(%exists j:0<=j<a.tam:a.fechaHNombre[i][0] = a.fechaHNombre[j][0] / a.fechaHNombre[i][1] = a.fechaHNombre[j][1] / a.duracionPrioridad[i][0] = a.duracionPrioridad[j][0] / a.duracionPrioridad[i][1] = a.duracionPrioridad[j][1]))} \nno se cumple.",
    "En la línea 59, \ninvariante true,\no cota a.tam - i decreciente\nno se cumple.",
    "En la línea 63, \ninvariante true,\no cota a.tam - j decreciente\nno se cumple.",
    "En la línea 61, los guardias son incompletos.",
    "En la línea 74, los guardias son incompletos.",
    "En la línea 58, los guardias son incompletos.",
    "En la línea 57, los guardias son incompletos.",
    "En la línea 90, \nla precondición {(%exists i:0<=i<a.tam:a.fechaHNombre[i][0] = fechaHora)} \nno se cumple.",
    "En la línea 97, \ninvariante true,\no cota a.tam - i decreciente\nno se cumple.",
    "En la línea 101, \ninvariante true,\no cota a.tam - j - 1 decreciente\nno se cumple.",
    "En la línea 99, los guardias son incompletos.",
    "En la línea 95, los guardias son incompletos.",
    "En la línea 120, \nla precondición {esFechaValida(intOfString(fecha))} \nno se cumple.",
    "En la línea 132, \ninvariante true,\no cota a.tam - i decreciente\nno se cumple.",
    "En la línea 136, \ninvariante true,\no cota cantidadActDia(a,fecha) - j decreciente\nno se cumple.",
    "En la línea 134, los guardias son incompletos.",
    "En la línea 130, los guardias son incompletos.",
    "En la línea 148, \nla precondición {fechaHoraValida(fechaHora)} \nno se cumple.",
    "En la línea 153, \ninvariante true,\no cota a.tam - k + 1 decreciente\nno se cumple.",
    "En la línea 157, los guardias son incompletos.",
    "En la línea 164, \nla precondición {! (%exists i:0<=i<a1.tam:choca(a2,a1.fechaHNombre[i][0],a1.duracionPrioridad[i][0])) / a1.tam + a2.tam <= a1.MAX} \nno se cumple.",
    "En la línea 180, \ninvariante true,\no cota a2.tam - k decreciente\nno se cumple.",
    "En la línea 164, \nla postcondición {(%forall k:0<=k<a2.tam:(%exists i:0<=i<a1.tam:a1.fechaHNombre[i][0] = a2.fechaHNombre[k][0] / a1.fechaHNombre[i][1] = a2.fechaHNombre[k][1] / a1.duracionPrioridad[i][0] = a2.duracionPrioridad[k][0] / a1.duracionPrioridad[i][1] = a2.duracionPrioridad[k][1])) / (%forall i:0<=i<a1.tam:(%exists j:0<=j<a2.tam:a1.fechaHNombre[i][0] = a1.fechaHNombre[j][0] / a1.fechaHNombre[i][1] = a1.fechaHNombre[j][1] / a1.duracionPrioridad[i][0] = a1.duracionPrioridad[j][0] / a1.duracionPrioridad[i][1] = a1.duracionPrioridad[j][1]))} \nno se cumple.",
    "En la línea 190, \nla precondición {esFechaValida(intOfString(fecha)) / 0 <= prioridad / prioridad <= 5} \nno se cumple.",
    "En la línea 199, \ninvariante true,\no cota a.tam - k decreciente\nno se cumple.",
    "En la línea 204, \ninvariante true,\no cota cantidadActDia(a,fecha) - j decreciente\nno se cumple.",
    "En la línea 206, los guardias son incompletos.",
    "En la línea 201, los guardias son incompletos.",
    "En la línea 226, \ninvariante true,\no cota 6 - prioridad decreciente\nno se cumple.",
    "En la línea 228, \ninvariante true,\no cota a.tam - k decreciente\nno se cumple.",
    "En la línea 230, los guardias son incompletos.",
    "En la línea 245, \nla postcondición {cantidadActividades = a.tam} \nno se cumple.",
    "En la línea 249, \nla precondición {esFechaValida(intOfString(fecha))} \nno se cumple.",
    "En la línea 255, \ninvariante true,\no cota a.tam - k decreciente\nno se cumple.",
    "En la línea 257, los guardias son incompletos.",
    "En la línea 261, \nla postcondición {cantidadActDia = (%count i:0<=i<a.tam:obtenerFecha(a.fechaHNombre[i][0]) = fecha)} \nno se cumple.",
    "En la línea 265, \nla precondición {esFechaValida(intOfString(fecha))} \nno se cumple.",
    "En la línea 271, \ninvariante true,\no cota a.tam - k decreciente\nno se cumple.",
    "En la línea 272, los guardias son incompletos.",
    "En la línea 275, \nla postcondición {diaLibre = (%forall i:0<=i<a.tam:fecha != obtenerFecha(a.fechaHNombre[i][0]))} \nno se cumple.",
    "En la línea 288, los guardias son incompletos.",
    "En la línea 287, los guardias son incompletos.",
    "En la línea 286, los guardias son incompletos.",
    "En la línea 294, \nla postcondición {duracionValida == fechaHoraValida(fh) / d > 0 / (obtenerMinutos(fh) + d) mod 60 + ((obtenerMinutos(fh) + d) div 60 + obtenerHora(fh)) * 100 <= 2200} \nno se cumple.",
    "En la línea 311, los guardias son incompletos.",
    "En la línea 308, los guardias son incompletos.",
    "En la línea 306, los guardias son incompletos.",
    "En la línea 316, \nla postcondición {fechaHoraValida == length(fh) = 12 / (%forall j:0<=j<length(fh):\"0\" <= substring(fh,j,j + 1) / substring(fh,j,j + 1) <= \"9\") / esHoraValida(intOfString(substring(fh,8,12))) / esFechaValida(intOfString(substring(fh,0,8)))} \nno se cumple.",
    "En la línea 324, \nla postcondición {esFechaValida == (1 <= f mod 100 / f mod 100 <= 30) / (1 <= f div 100 mod 100 / f div 100 mod 100 <= 12) / f div 10000 >= 2007} \nno se cumple.",
    "En la línea 331, \nla postcondición {esHoraValida == (6 <= h div 100 / h div 100 <= 21) / 0 <= h mod 100 / h mod 100 <= 59 / h div 100 = 22 / h mod 100 = 0} \nno se cumple.",
    "En la línea 338, \nla postcondición {esPrioridadValida == 0 <= p / p <= 5} \nno se cumple.",
    "En la línea 342, \nla precondición {fechaHoraValida(fh1) / fechaHoraValida(fh2) / d1 > 0 / d2 > 0} \nno se cumple.",
    "En la línea 345, \nla postcondición {seSolapan == fh1 < fh2 / fh2 < fin(fh1,d1) / fh1 = fh2 / fh2 < fh1 / fh1 < fin(fh2,d2)} \nno se cumple.",
    "En la línea 349, \nla precondición {fechaHoraValida(fh) / d > 0} \nno se cumple.",
    "En la línea 355, \ninvariante true,\no cota a.tam - k decreciente\nno se cumple.",
    "En la línea 359, \nla postcondición {choca == (%exists x:0<=x<a.tam:seSolapan(a.fechaHNombre[x][0],a.duracionPrioridad[x][0],fh,d))} \nno se cumple.",
    "En la línea 367, \nla postcondición {obtenerMinutos = intOfString(substring(fh,8,12)) mod 100} \nno se cumple.",
    "En la línea 374, \nla postcondición {obtenerHora = intOfString(substring(fh,8,12)) div 100} \nno se cumple.",
    "En la línea 381, \nla postcondición {obtenerFecha = substring(fh,0,8)} \nno se cumple.",
    "En la línea 397, los guardias son incompletos.",
    "En la línea 411, \nel invariante (%exists j:0<=j<a.tam:a.fechaHNombre[i][0] = fh) / ! (%exists j:0<=j<a.tam:a.fechaHNombre[i][0] = fh) \nno se cumple.",
    "En la línea 411, \ninvariante (%exists j:0<=j<a.tam:a.fechaHNombre[i][0] = fh) / ! (%exists j:0<=j<a.tam:a.fechaHNombre[i][0] = fh),\no cota a.tam - i decreciente\nno se cumple.",
    "En la línea 414, \nla postcondición {pertenece == (%exists i:0<=i<a.tam:fh = a.fechaHNombre[i][0])} \nno se cumple.",
    "En la línea 424, \ninvariante true,\no cota N - k + 1 decreciente\nno se cumple.",
    "En la línea 442, \ninvariante true,\no cota 100000 - k decreciente\nno se cumple.",
    "En la línea 447, \ninvariante true,\no cota 10 - l decreciente\nno se cumple.",
    "En la línea 471, \ninvariante true,\no cota 10 - m decreciente\nno se cumple.",
    "En la línea 476, \ninvariante true,\no cota n - j decreciente\nno se cumple.",
    "En la línea 478, \ninvariante true,\no cota 10 - l decreciente\nno se cumple.",
    "En la línea 487, los guardias son incompletos.",
    "En la línea 475, los guardias son incompletos.",
    "En la línea 499, \ninvariante true,\no cota 10 - l decreciente\nno se cumple.",
    "En la línea 506, los guardias son incompletos.",
    "En la línea 504, los guardias son incompletos.",
    "En la línea 516, \ninvariante true,\no cota 10 - l decreciente\nno se cumple.",
    "En la línea 521, los guardias son incompletos.",
    "En la línea 528, \ninvariante true,\no cota 10 - l decreciente\nno se cumple.",
    "En la línea 533, los guardias son incompletos.",
    "En la línea 546, \ninvariante true,\no cota 10 - l decreciente\nno se cumple.",
    "En la línea 552, los guardias son incompletos.",
    "En la línea 562, \ninvariante true,\no cota 10 - l decreciente\nno se cumple.",
    "En la línea 569, los guardias son incompletos.",
    "En la línea 567, los guardias son incompletos.",
    "En la línea 576, los guardias son incompletos.",
    "En la línea 586, \ninvariante true,\no cota 10 - l decreciente\nno se cumple.",
    "En la línea 591, los guardias son incompletos.",
    "En la línea 599, los guardias son incompletos.",
    "En la línea 470, los guardias son incompletos."
  };
  
  }
    
