
  
  import ve.usb.util.*;
  import ve.usb.util.tads.*;       
  /**
   Class generated by Gacela v2.7.2 Universidad Simón Bolívar, febrero de 2007	Lenguaje de Dijkstra de Comandos con Guardias con aserciones,	testing dinámico y herramientas de verificación. 
  */
    public class blackjack {
       
    public static int valorcarta (final String[] GCL_m, final int GCL_i, final int GCL__ini_y) { 
     int GCL_y = GCL__ini_y;
 	  
    
      if (GclLib.__eq(GCL_m[GCL_i],"AScorazon ")) {
 

            GCL_y = 1;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"2corazon ")) {
 

            GCL_y = 2;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"3corazon ")) {
 

            GCL_y = 3;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"4corazon ")) {
 

            GCL_y = 4;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"5corazon ")) {
 

            GCL_y = 5;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"6corazon ")) {
 

            GCL_y = 6;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"7corazon ")) {
 

            GCL_y = 7;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"8corazon ")) {
 

            GCL_y = 8;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"9corazon ")) {
 

            GCL_y = 9;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"10corazon ")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"Jcorazon ")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"Qcorazon ")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"Kcorazon ")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"COcorazon ")) {
 

            GCL_y = 11;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"ASdiamante")) {
 

            GCL_y = 1;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"2diamante")) {
 

            GCL_y = 2;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"3diamante")) {
 

            GCL_y = 3;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"4diamante")) {
 

            GCL_y = 4;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"5diamante")) {
 

            GCL_y = 5;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"6diamante")) {
 

            GCL_y = 6;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"7diamante")) {
 

            GCL_y = 7;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"8diamante")) {
 

            GCL_y = 8;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"9diamante")) {
 

            GCL_y = 9;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"10diamante")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"Jdiamante")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"Qdiamante")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"Kdiamante")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"COdiamante")) {
 

            GCL_y = 11;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"AStrebol")) {
 

            GCL_y = 1;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"2trebol")) {
 

            GCL_y = 2;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"3trebol")) {
 

            GCL_y = 3;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"4trebol")) {
 

            GCL_y = 4;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"5trebol")) {
 

            GCL_y = 5;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"6trebol")) {
 

            GCL_y = 6;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"7trebol")) {
 

            GCL_y = 7;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"8trebol")) {
 

            GCL_y = 8;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"9trebol")) {
 

            GCL_y = 9;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"10trebol")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"Jtrebol")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"Qtrebol")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"Ktrebol")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"COtrebol")) {
 

            GCL_y = 11;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"ASpica")) {
 

            GCL_y = 1;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"2pica")) {
 

            GCL_y = 2;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"3pica")) {
 

            GCL_y = 3;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"4pica")) {
 

            GCL_y = 4;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"5pica")) {
 

            GCL_y = 5;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"6pica")) {
 

            GCL_y = 6;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"7pica")) {
 

            GCL_y = 7;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"8pica")) {
 

            GCL_y = 8;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"9pica")) {
 

            GCL_y = 9;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"10pica")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"Jpica")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"Qpica")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"Kpica")) {
 

            GCL_y = 10;         
      } else if (GclLib.__eq(GCL_m[GCL_i],"COpica")) {
 

            GCL_y = 11;         
      } else {
        assert GclLib.__eq(GCL_m[GCL_i],"") :__msg[0]; 
        

            GCL_y = 0;        
      }

      final int _valorcarta = GCL_y;  
       
      return _valorcarta; 
    }
  
    public static String separarpinta (final String GCL_carta, final String GCL__ini_pinta) { 
     String GCL_pinta = GCL__ini_pinta;
 	  
    
      if (GclLib.__eq(GclLib.__length(GCL_carta),5)) {
 

            GCL_pinta = GclLib.__substring(GCL_carta,1,5);         
      } else if (GclLib.__eq(GclLib.__length(GCL_carta),6)) {
 

            GCL_pinta = GclLib.__substring(GCL_carta,2,6);         
      } else if (GclLib.__eq(GclLib.__length(GCL_carta),7)) {
 

            GCL_pinta = GclLib.__substring(GCL_carta,1,7);         
      } else if (GclLib.__eq(GclLib.__length(GCL_carta),8)) {
 

            GCL_pinta = GclLib.__substring(GCL_carta,2,8);         
      } else if (GclLib.__eq(GclLib.__length(GCL_carta),9)) {
 

            GCL_pinta = GclLib.__substring(GCL_carta,1,9);         
      } else if (GclLib.__eq(GclLib.__length(GCL_carta),10)) {
 

            GCL_pinta = GclLib.__substring(GCL_carta,2,10);         
      } else if (GclLib.__eq(GclLib.__length(GCL_carta),11)) {
 

            GCL_pinta = GclLib.__substring(GCL_carta,1,11);         
      } else {
        assert GclLib.__eq(GclLib.__length(GCL_carta),12) :__msg[1]; 
        

            GCL_pinta = GclLib.__substring(GCL_carta,2,12);        
      }

      final String _separarpinta = GCL_pinta;  
       
      return _separarpinta; 
    }
  
    public static String separarnumero (final String GCL_carta, final String GCL__ini_numeroletra) { 
     String GCL_numeroletra = GCL__ini_numeroletra;
 	  
    
      if (GclLib.__eq(GclLib.__length(GCL_carta),5)) {
 

            GCL_numeroletra = GclLib.__substring(GCL_carta,0,1);         
      } else if (GclLib.__eq(GclLib.__length(GCL_carta),6)) {
 

            GCL_numeroletra = GclLib.__substring(GCL_carta,0,2);         
      } else if (GclLib.__eq(GclLib.__length(GCL_carta),7)) {
 

            GCL_numeroletra = GclLib.__substring(GCL_carta,0,1);         
      } else if (GclLib.__eq(GclLib.__length(GCL_carta),8)) {
 

            GCL_numeroletra = GclLib.__substring(GCL_carta,0,2);         
      } else if (GclLib.__eq(GclLib.__length(GCL_carta),9)) {
 

            GCL_numeroletra = GclLib.__substring(GCL_carta,0,1);         
      } else if (GclLib.__eq(GclLib.__length(GCL_carta),10)) {
 

            GCL_numeroletra = GclLib.__substring(GCL_carta,0,2);         
      } else if (GclLib.__eq(GclLib.__length(GCL_carta),11)) {
 

            GCL_numeroletra = GclLib.__substring(GCL_carta,0,1);         
      } else {
        assert GclLib.__eq(GclLib.__length(GCL_carta),12) :__msg[2]; 
        

            GCL_numeroletra = GclLib.__substring(GCL_carta,0,2);        
      }

      final String _separarnumero = GCL_numeroletra;  
       
      return _separarnumero; 
    }
  
    public static Screen dibujarpintas (final String GCL_pinta, final int GCL_x1, final int GCL_y1, final int GCL_x2, final int GCL_y2, final Screen GCL__ini_p) { 
     Screen GCL_p = GCL__ini_p;
 	  
        int GCL_xi = 0;
    int GCL_colorrojo = 133955584;
    int GCL_colorblanco = 134217727;
    int GCL_colornegro = 0;
    int GCL_colorverde = 32768;
    int GCL_colorazul = 511;
    int GCL_k = 0;

    GCL_p = lineas (GCL_x1,GCL_x1,GCL_y1,GCL_y2,1,1,0,0,90,GCL_colorblanco,GCL_p);
    GclLib.__addFilledCircle (GCL_p,GCL_x1,GCL_y2,5,GCL_colorverde);
    GclLib.__addFilledCircle (GCL_p,GCL_x1 + 5,GCL_y2 - 5,5,GCL_colorblanco);
    GclLib.__addFilledCircle (GCL_p,GCL_x2,GCL_y2,5,GCL_colorverde);
    GclLib.__addFilledCircle (GCL_p,GCL_x2 - 5,GCL_y2 - 5,5,GCL_colorblanco);
    GclLib.__addFilledCircle (GCL_p,GCL_x1,GCL_y1,5,GCL_colorverde);
    GclLib.__addFilledCircle (GCL_p,GCL_x1 + 5,GCL_y1 + 5,5,GCL_colorblanco);
    GclLib.__addFilledCircle (GCL_p,GCL_x2,GCL_y1,5,GCL_colorverde);
    GclLib.__addFilledCircle (GCL_p,GCL_x2 - 5,GCL_y1 + 5,5,GCL_colorblanco);
      if (GclLib.__eq(GCL_pinta,"corazon ")) {
 

          GclLib.__addFilledCircle (GCL_p,GCL_x1 + 35,GCL_y2 - 35,15,GCL_colorrojo);
          GclLib.__addFilledCircle (GCL_p,GCL_x1 + 55,GCL_y2 - 35,15,GCL_colorrojo);
            GCL_k = 0;
            GCL_xi = GCL_x1 + 25;
            assert GCL_k >= 0 && GCL_xi >= GCL_x1 + 25 :__msg[3]; 
            
            
            while (GCL_k <= 40) {
            final int GCL___C0 = 41 - GCL_k;


                GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 65,GCL_xi,GCL_y2 - 45,GCL_colorrojo);
                  GCL_xi = GCL_xi + 1;
                  GCL_k = GCL_k + 1;              
              assert GCL_k >= 0 && GCL_xi >= GCL_x1 + 25 && GclLib.__GT(GCL___C0,41 - GCL_k) :__msg[4]; 
               
            }         
      } else if (GclLib.__eq(GCL_pinta,"diamante")) {
 

            GCL_k = 0;
            GCL_xi = GCL_x1 + 25;
            assert GCL_k >= 0 && GCL_xi >= GCL_x1 + 25 :__msg[5]; 
            
            
            while (GCL_k <= 40) {
            final int GCL___C1 = 41 - GCL_k;


                GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 15,GCL_xi,GCL_y2 - 45,GCL_colorrojo);
                  GCL_xi = GCL_xi + 1;
                  GCL_k = GCL_k + 1;              
              assert GCL_k >= 0 && GCL_xi >= GCL_x1 + 25 && GclLib.__GT(GCL___C1,41 - GCL_k) :__msg[6]; 
               
            }
            GCL_k = 0;
            GCL_xi = GCL_x1 + 25;
            assert GCL_k >= 0 && GCL_xi >= GCL_x1 + 25 :__msg[7]; 
            
            
            while (GCL_k <= 40) {
            final int GCL___C2 = 41 - GCL_k;


                GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 75,GCL_xi,GCL_y2 - 45,GCL_colorrojo);
                  GCL_xi = GCL_xi + 1;
                  GCL_k = GCL_k + 1;              
              assert GCL_k >= 0 && GCL_xi >= GCL_x1 + 25 && GclLib.__GT(GCL___C2,41 - GCL_k) :__msg[8]; 
               
            }         
      } else if (GclLib.__eq(GCL_pinta,"trebol")) {
 

          GclLib.__addFilledCircle (GCL_p,GCL_x1 + 45,GCL_y2 - 30,11,GCL_colornegro);
          GclLib.__addFilledCircle (GCL_p,GCL_x1 + 35,GCL_y2 - 45,11,GCL_colornegro);
          GclLib.__addFilledCircle (GCL_p,GCL_x1 + 55,GCL_y2 - 45,11,GCL_colornegro);
            GCL_k = 0;
            GCL_xi = GCL_x1 + 40;
            assert GCL_k >= 0 && GCL_xi >= GCL_x1 + 40 :__msg[9]; 
            
            
            while (GCL_k <= 10) {
            final int GCL___C3 = 11 - GCL_k;


                GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 45,GCL_xi,GCL_y2 - 60,GCL_colornegro);
                  GCL_xi = GCL_xi + 1;
                  GCL_k = GCL_k + 1;              
              assert GCL_k >= 0 && GCL_xi >= GCL_x1 + 40 && GclLib.__GT(GCL___C3,11 - GCL_k) :__msg[10]; 
               
            }         
      } else {
        assert GclLib.__eq(GCL_pinta,"pica") :__msg[15]; 
        

          GclLib.__addFilledCircle (GCL_p,GCL_x1 + 35,GCL_y2 - 50,15,GCL_colornegro);
          GclLib.__addFilledCircle (GCL_p,GCL_x1 + 55,GCL_y2 - 50,15,GCL_colornegro);
            GCL_k = 0;
            GCL_xi = GCL_x1 + 25;
            assert GCL_k >= 0 && GCL_xi >= GCL_x1 + 25 :__msg[11]; 
            
            
            while (GCL_k <= 40) {
            final int GCL___C4 = 41 - GCL_k;


                GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 20,GCL_xi,GCL_y2 - 40,GCL_colornegro);
                  GCL_xi = GCL_xi + 1;
                  GCL_k = GCL_k + 1;              
              assert GCL_k >= 0 && GCL_xi >= GCL_x1 + 25 && GclLib.__GT(GCL___C4,41 - GCL_k) :__msg[12]; 
               
            }
            GCL_k = 0;
            GCL_xi = GCL_x1 + 40;
            assert GCL_k >= 0 && GCL_xi >= GCL_x1 + 40 :__msg[13]; 
            
            
            while (GCL_k <= 10) {
            final int GCL___C5 = 11 - GCL_k;


                GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 50,GCL_xi,GCL_y2 - 70,GCL_colornegro);
                  GCL_xi = GCL_xi + 1;
                  GCL_k = GCL_k + 1;              
              assert GCL_k >= 0 && GCL_xi >= GCL_x1 + 40 && GclLib.__GT(GCL___C5,11 - GCL_k) :__msg[14]; 
               
            }        
      }

      final Screen _dibujarpintas = GCL_p;  
       
      return _dibujarpintas; 
    }
  
    public static Screen dibujarletrasynumeros (final String GCL_numeroletra, final int GCL_x1, final int GCL_y1, final int GCL_x2, final int GCL_y2, final Screen GCL__ini_p) { 
     Screen GCL_p = GCL__ini_p;
 	  
        int GCL_colornegro = 0;
    int GCL_colorblanco = 134217727;

      if (GclLib.__eq(GCL_numeroletra,"AS")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 80,GCL_x1 + 25,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 35,GCL_y2 - 100,GCL_x1 + 55,GCL_y2 - 100,GCL_colornegro);         
      } else if (GclLib.__eq(GCL_numeroletra,"2")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 80,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 120,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 100,GCL_x1 + 65,GCL_y2 - 100,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 65,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 100,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 100,GCL_x1 + 25,GCL_y2 - 120,GCL_colornegro);         
      } else if (GclLib.__eq(GCL_numeroletra,"3")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 30,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 80,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 30,GCL_y2 - 120,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 35,GCL_y2 - 100,GCL_x1 + 65,GCL_y2 - 100,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 65,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);         
      } else if (GclLib.__eq(GCL_numeroletra,"4")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 35,GCL_y2 - 80,GCL_x1 + 35,GCL_y2 - 100,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 55,GCL_y2 - 80,GCL_x1 + 55,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 35,GCL_y2 - 100,GCL_x1 + 55,GCL_y2 - 100,GCL_colornegro);         
      } else if (GclLib.__eq(GCL_numeroletra,"5")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 80,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 120,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 100,GCL_x1 + 65,GCL_y2 - 100,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 25,GCL_y2 - 100,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 65,GCL_y2 - 100,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);         
      } else if (GclLib.__eq(GCL_numeroletra,"6")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 80,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 120,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 100,GCL_x1 + 65,GCL_y2 - 100,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 25,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 65,GCL_y2 - 100,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);         
      } else if (GclLib.__eq(GCL_numeroletra,"7")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 30,GCL_y2 - 80,GCL_x1 + 55,GCL_y2 - 80,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 55,GCL_y2 - 80,GCL_x1 + 55,GCL_y2 - 120,GCL_colornegro);         
      } else if (GclLib.__eq(GCL_numeroletra,"8")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 80,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 120,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 100,GCL_x1 + 65,GCL_y2 - 100,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 65,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 25,GCL_y2 - 120,GCL_colornegro);         
      } else if (GclLib.__eq(GCL_numeroletra,"9")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 80,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 120,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 100,GCL_x1 + 65,GCL_y2 - 100,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 65,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 25,GCL_y2 - 100,GCL_colornegro);         
      } else if (GclLib.__eq(GCL_numeroletra,"10")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 30,GCL_y2 - 80,GCL_x1 + 30,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 120,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 80,GCL_x1 + 45,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 65,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 80,GCL_colornegro);         
      } else if (GclLib.__eq(GCL_numeroletra,"J")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 35,GCL_y2 - 80,GCL_x1 + 55,GCL_y2 - 80,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 80,GCL_x1 + 45,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 30,GCL_y2 - 120,GCL_x1 + 45,GCL_y2 - 120,GCL_colornegro);         
      } else if (GclLib.__eq(GCL_numeroletra,"Q")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 80,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 120,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 100,GCL_x1 + 75,GCL_y2 - 130,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 65,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 25,GCL_y2 - 120,GCL_colornegro);         
      } else if (GclLib.__eq(GCL_numeroletra,"K")) {
 

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 25,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 100,GCL_x1 + 65,GCL_y2 - 80,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 100,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);         
      } else {
        assert GclLib.__eq(GCL_numeroletra,"CO") :__msg[16]; 
        

          GclLib.__addColoredLine (GCL_p,GCL_x1 + 45,GCL_y2 - 80,GCL_x1 + 45,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 80,GCL_x1 + 65,GCL_y2 - 120,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 25,GCL_y2 - 100,GCL_x1 + 65,GCL_y2 - 100,GCL_colornegro);
          GclLib.__addColoredLine (GCL_p,GCL_x1 + 65,GCL_y2 - 80,GCL_x1 + 25,GCL_y2 - 120,GCL_colornegro);        
      }

      final Screen _dibujarletrasynumeros = GCL_p;  
       
      return _dibujarletrasynumeros; 
    }
  
    public static Screen dibujarcarta (final String GCL_carta, final int GCL_xi, final int GCL_yi, final int GCL_xf, final int GCL_yf, final Screen GCL__ini_y) { 
     Screen GCL_y = GCL__ini_y;
 	  
        String GCL_pinta = "";
    String GCL_numeroletra = "";

    GCL_pinta = separarpinta (GCL_carta,GCL_pinta);
    GCL_numeroletra = separarnumero (GCL_carta,GCL_numeroletra);
    GCL_y = dibujarpintas (GCL_pinta,GCL_xi,GCL_yi,GCL_xf,GCL_yf,GCL_y);
    GCL_y = dibujarletrasynumeros (GCL_numeroletra,GCL_xi,GCL_xf,GCL_yi,GCL_yf,GCL_y);
      final Screen _dibujarcarta = GCL_y;  
       
      return _dibujarcarta; 
    }
  
    public static Screen lineas (final int GCL_xi, final int GCL_xf, final int GCL_yi, final int GCL_yf, final int GCL_varxi, final int GCL_varxf, final int GCL_varyi, final int GCL_varyf, final int GCL_lineas, final int GCL_color, final Screen GCL__ini_y) { 
     Screen GCL_y = GCL__ini_y;
 	 
      assert GCL_xi >= - 400 && GCL_xf >= - 400 && GCL_yi >= - 250 && GCL_yf >= - 250 && GCL_lineas > 0 :__msg[17]; 
       
        int GCL_k = 0;
    int GCL_x1 = GCL_xi;
    int GCL_x2 = GCL_xf;
    int GCL_y1 = GCL_yi;
    int GCL_y2 = GCL_yf;

      assert GCL_k >= 0 :__msg[18]; 
      
      
      while (GCL_k <= GCL_lineas) {
      final int GCL___C6 = GCL_lineas + 1 - GCL_k;


          GclLib.__addColoredLine (GCL_y,GCL_x1,GCL_y1,GCL_x2,GCL_y2,GCL_color);
            GCL_x1 = GCL_x1 + GCL_varxi;
            GCL_x2 = GCL_x2 + GCL_varxf;
            GCL_y1 = GCL_y1 + GCL_varyi;
            GCL_y2 = GCL_y2 + GCL_varyf;
            GCL_k = GCL_k + 1;        
        assert GCL_k >= 0 && GclLib.__GT(GCL___C6,GCL_lineas + 1 - GCL_k) :__msg[19]; 
         
      }
      final Screen _lineas = GCL_y;  
       
      return _lineas; 
    }
  
    public static Screen mostrarmesa (final String GCL_nombre, final int GCL_credito, final Screen GCL__ini_tablero) { 
     Screen GCL_tablero = GCL__ini_tablero;
 	  
        int GCL_colorverde = 32768;
    int GCL_colorblanco = 134217727;
    int GCL_colorazul = 192;
    int GCL_colornegro = 0;

    GclLib.__show (GCL_tablero);
    GCL_tablero = lineas (- 400,- 400,250,- 250,1,1,0,0,800,GCL_colorverde,GCL_tablero);
    GCL_tablero = lineas (180,180,220,80,1,1,0,0,90,GCL_colorazul,GCL_tablero);
    GCL_tablero = lineas (190,190,220,80,1,1,0,0,5,GCL_colorblanco,GCL_tablero);
    GCL_tablero = lineas (255,255,220,80,1,1,0,0,5,GCL_colorblanco,GCL_tablero);
    GCL_tablero = lineas (180,270,90,90,0,0,1,1,5,GCL_colorblanco,GCL_tablero);
    GCL_tablero = lineas (180,270,205,205,0,0,1,1,5,GCL_colorblanco,GCL_tablero);
    GCL_tablero = lineas (225,210,180,150,0,1,0,0,30,GCL_colorblanco,GCL_tablero);
    GCL_tablero = lineas (225,210,120,150,0,1,0,0,30,GCL_colorblanco,GCL_tablero);
    GclLib.__addColoredLine (GCL_tablero,179,79,172,72,GCL_colornegro);
    GCL_tablero = lineas (172,172,212,72,2,2,2,2,4,GCL_colorblanco,GCL_tablero);
    GCL_tablero = lineas (173,173,213,73,2,2,2,2,3,GCL_colornegro,GCL_tablero);
    GCL_tablero = lineas (179,269,78,78,- 2,- 2,- 2,- 2,4,GCL_colorblanco,GCL_tablero);
    GCL_tablero = lineas (180,270,79,79,- 2,- 2,- 2,- 2,3,GCL_colornegro,GCL_tablero);
    GclLib.__addText (GCL_tablero,"MAZO DE CARTAS",167,55);
    GclLib.__addText (GCL_tablero,"B   L   A   C   K   * * * *   J   A   C   K",- 100,230);
    GclLib.__addText (GCL_tablero,"JUGADOR: " + GCL_nombre,190,0);
    GclLib.__addText (GCL_tablero,"CREDITO DISPONIBLE: " + GCL_credito,190,- 60);
      final Screen _mostrarmesa = GCL_tablero;  
       
      return _mostrarmesa; 
    }
  
    public static Screen estadoinicial (final String[] GCL_mano1, final String[] GCL_mano2, final int GCL_apuesta, final int GCL_credito, final int GCL_vmc, final int GCL_vmj, final Screen GCL__ini_tablero) { 
     Screen GCL_tablero = GCL__ini_tablero;
 	  
        int GCL_colorblanco = 134217727;
    int GCL_colorazul = 192;

    GCL_tablero = dibujarcarta (GCL_mano2[0],- 396,- 200,- 306,- 60,GCL_tablero);
    GCL_tablero = dibujarcarta (GCL_mano2[1],- 300,- 200,- 210,- 60,GCL_tablero);
    GCL_tablero = lineas (- 396,- 396,200,60,1,1,0,0,90,GCL_colorazul,GCL_tablero);
    GCL_tablero = lineas (- 387,- 387,200,60,1,1,0,0,5,GCL_colorblanco,GCL_tablero);
    GCL_tablero = lineas (- 322,- 322,200,60,1,1,0,0,5,GCL_colorblanco,GCL_tablero);
    GCL_tablero = lineas (- 396,- 307,70,70,0,0,1,1,5,GCL_colorblanco,GCL_tablero);
    GCL_tablero = lineas (- 396,- 307,180,180,0,0,1,1,5,GCL_colorblanco,GCL_tablero);
    GCL_tablero = lineas (- 352,- 367,160,130,0,1,0,0,30,GCL_colorblanco,GCL_tablero);
    GCL_tablero = lineas (- 352,- 367,100,130,0,1,0,0,30,GCL_colorblanco,GCL_tablero);
    GCL_tablero = dibujarcarta (GCL_mano1[1],- 300,60,- 210,200,GCL_tablero);
    GCL_tablero = actualizarmarcador (GCL_apuesta,GCL_credito,GCL_vmc,GCL_vmj,"",GCL_tablero);
      final Screen _estadoinicial = GCL_tablero;  
       
      return _estadoinicial; 
    }
  
    public static Screen actualizarmarcador (final int GCL_apuesta, final int GCL_credito, final int GCL_ptscrupier, final int GCL_ptsjugador, final String GCL_texto, final Screen GCL__ini_y) { 
     Screen GCL_y = GCL__ini_y;
 	  
    
    GclLib.__eraseTexts (GCL_y,190,- 30);
    GclLib.__addText (GCL_y,"APUESTA REALIZADA: " + GCL_apuesta,190,- 30);
    GclLib.__eraseTexts (GCL_y,190,- 60);
    GclLib.__addText (GCL_y,"CREDITO DISPONIBLE: " + GCL_credito,190,- 60);
    GclLib.__eraseTexts (GCL_y,190,- 90);
    GclLib.__addText (GCL_y,"MANO DEL CRUPIER: " + GCL_ptscrupier,190,- 90);
    GclLib.__eraseTexts (GCL_y,190,- 120);
    GclLib.__addText (GCL_y,"MANO DEL JUGADOR: " + GCL_ptsjugador,190,- 120);
    GclLib.__addText (GCL_y,GCL_texto,- 200,10);
      final Screen _actualizarmarcador = GCL_y;  
       
      return _actualizarmarcador; 
    }
  
    public static String bienvenida (final Screen GCL_p, final String GCL__ini_s) { 
     String GCL_s = GCL__ini_s;
 	  
    
    System.out.println ("");
    System.out.println ("           **************  B I E N V E N I D O  ****************");
    System.out.println ("");
    System.out.println ("                           ******  AL  *******");
    System.out.println ("");
    System.out.println ("                  *********  USB BLACK JACK  ***********");
    System.out.println ("");
    GclLib.__hide (GCL_p);
      GCL_s = GclLib.__readString("Escribe tu nombre: ");
    System.out.println ("");
      final String _bienvenida = GCL_s;  
       
      return _bienvenida; 
    }
  
    public static  int pedirapuesta (final int GCL_credito, final String GCL_nombre) { 
    	  
        int GCL_apuesta = 0;
    boolean GCL_apuestavalida = false;
    int GCL_k = 0;

      GCL_k = 0;
      assert GCL_k >= 0 :__msg[20]; 
      
      
      while (! GCL_apuestavalida) {
      final int GCL___C7 = 100 - GCL_k;


            GCL_apuesta = GclLib.__readInt(GCL_nombre + " Cuanto deseas apostar?:");
            if (GCL_apuesta < 5) {
 

                System.out.println ("La apuesta minima es de 5, vuelva a apostar");               
            } else if (GCL_apuesta > GCL_credito) {
 

                System.out.println ("No posee suficiente credito para realizar esta apuesta");               
            } else {
              assert 5 <= GCL_apuesta && GCL_apuesta <= GCL_credito :__msg[22]; 
              

                  GCL_apuestavalida = true;              
            }

            GCL_k = GCL_k + 1;        
        assert GCL_k >= 0 && GclLib.__GT(GCL___C7,100 - GCL_k) :__msg[21]; 
         
      }
      final int _pedirapuesta = GCL_apuesta;  
       
      return _pedirapuesta; 
    }
  
    public static  String darcarta (final String[] GCL_mazo) { 
    	  
        double GCL_r = 0.0;
    GCL_r = Math.random();
    int GCL_x = ((int)(GCL_r * 55));

      final String _darcarta = GCL_mazo[GCL_x];  
       
      return _darcarta; 
    }
  
    public static  int calcularvalormano (final String[] GCL_mano) { 
    	  
        int GCL_valormano = 0;
    int GCL_y = 0;
    int GCL_k = 0;

    /* { true } */

      
      while (GCL_k < 8) {
      final int GCL___C8 = 8 - GCL_k;


          GCL_y = valorcarta (GCL_mano,GCL_k,GCL_y);
            GCL_valormano = GCL_valormano + GCL_y;
            GCL_k = GCL_k + 1;        
        assert GclLib.__GT(GCL___C8,8 - GCL_k) :__msg[23]; 
         
      }
      final int _calcularvalormano = GCL_valormano;  
       
      return _calcularvalormano; 
    }
  
    public static int pediropcion (final int GCL__ini_opcion) { 
     int GCL_opcion = GCL__ini_opcion;
 	  
        int GCL_k = 0;

    System.out.println ("Que desea hacer?");
    System.out.println ("1) Pedir una carta");
    System.out.println ("2) Plantarse");
    System.out.println ("3) Doblar Apuesta");
    System.out.println ("4) Salir del juego");
      GCL_k = 0;
      GCL_opcion = 0;
    /* { true } */

      
      while (GCL_opcion <= 0 || GCL_opcion > 4) {
      final int GCL___C9 = 10 - GCL_k;


            GCL_opcion = GclLib.__readInt("Opcion: ");
          System.out.println ("");
            if (GCL_opcion <= 0 || GCL_opcion > 4) {
 

                System.out.println (GCL_opcion + " no es una opcion valida, seleccione nuevamente");
                  GCL_k = GCL_k + 1;               
            } else {
              assert 0 < GCL_opcion && GCL_opcion <= 4 :__msg[25]; 
              

                  GCL_k = GCL_k + 1;              
            }
        
        assert GclLib.__GT(GCL___C9,10 - GCL_k) :__msg[24]; 
         
      }
      final int _pediropcion = GCL_opcion;  
       
      return _pediropcion; 
    }
  
    public static String[] eliminarcartas (final String[] GCL__ini_mano) { 
   
  int __max0 = GCL__ini_mano.length; 
  final String[] __array0 = new String[__max0]; 
  for (int __var0 = 0; __var0 < __max0; __var0++) { 
  
      __array0[__var0] = GCL__ini_mano[__var0]; 
  } 
    String[] GCL_mano = __array0;
 	  
        int GCL_k = 0;

    /* { true } */

      
      while (GCL_k < 8) {
      final int GCL___C10 = 8 - GCL_k;


            GCL_mano[GCL_k] = "";
            GCL_k = GCL_k + 1;        
        assert GclLib.__GT(GCL___C10,8 - GCL_k) :__msg[26]; 
         
      }
      final String[] _eliminarcartas = GCL_mano;  
       
      return _eliminarcartas; 
    }
  
    public static int[] salidajuego (final int[] GCL__ini_salida) { 
   
  int __max1 = GCL__ini_salida.length; 
  final int[] __array1 = new int[__max1]; 
  for (int __var1 = 0; __var1 < __max1; __var1++) { 
  
      __array1[__var1] = GCL__ini_salida[__var1]; 
  } 
    int[] GCL_salida = __array1;
 	  
    
      if (GclLib.__eq(GCL_salida[0],100)) {
 

          System.out.println ("Se acabo su numero de partidas disponibles, ADIOS!!!");
          System.out.println ("");         
      } else {
        assert GclLib.__neq(GCL_salida[0],100) :__msg[27]; 
        
        
      }

      if (GCL_salida[1] < 5) {
 

          System.out.println ("No posees suficiente credito para seguir jugando... ADIOS!!!");
          System.out.println ("");         
      } else {
        assert GCL_salida[1] >= 5 :__msg[28]; 
        
        
      }

      final int[] _salidajuego = GCL_salida;  
       
      return _salidajuego; 
    }
        
  /** main method, called when executing this class as a program.
    * @param args External arguments (Not used).
    */
  public static void main (String[] args) {
    try {
      _blackjack();
    } catch (java.lang.AssertionError __ae) {
      System.out.println (__ae.getMessage ());
      System.out.print ("Escriba una línea para terminar :");
      try { System.in.read (); } catch (Exception __e) {}
    } catch (StackOverflowError __ae) {
      System.out.println ("Demasiadas llamadas recursivas");
      System.out.print ("Escriba una línea para terminar :");
      try { System.in.read (); } catch (Exception __e) {}
    } catch (Throwable __e) {
       __e.printStackTrace ();
    } finally {
      System.exit (0);
    }
  }
  
  public static void _blackjack() {
         final String[] GCL_mazo = new String[] {"AScorazon ","2corazon ","3corazon ","4corazon ","5corazon ","6corazon ","7corazon ","8corazon ","9corazon ","10corazon ","Jcorazon ","Qcorazon ","Kcorazon ","COcorazon ","ASdiamante","2diamante","3diamante","4diamante","5diamante","6diamante","7diamante","8diamante","9diamante","10diamante","Jdiamante","Qdiamante","Kdiamante","COdiamante","AStrebol","2trebol","3trebol","4trebol","5trebol","6trebol","7trebol","8trebol","9trebol","10trebol","Jtrebol","Qtrebol","Ktrebol","COtrebol","ASpica","2pica","3pica","4pica","5pica","6pica","7pica","8pica","9pica","10pica","Jpica","Qpica","Kpica","COpica"};
      String[] GCL_manojugador = new String[] {"","","","","","","",""};
      String[] GCL_manocrupier = new String[] {"","","","","","","",""};
      String GCL_nombre = "";
      int GCL_p = 0;
      int GCL_credito = 0;
      int GCL_apuesta = 0;
      int GCL_k = 0;
      int GCL_z = 0;
      int GCL_w = 0;
      int GCL_n = 0;
      int GCL_y = 0;
      int GCL_opcion = 0;
      int GCL_valormanojugador = 0;
      int GCL_valormanocrupier = 0;
      boolean GCL_finmano = false;
      boolean GCL_salirjuego = false;
      int GCL_numerodepartidasmax = 0;
      boolean GCL_terminodejugar = false;
      int[] GCL_salida = new int[] {0,0};
      Screen GCL_tablero = GclLib.__newScreen("BLACK JACK - Mesa de juego",800,500);
      String GCL_s = "";
      int GCL_xi = 0;
      int GCL_xf = 0;

      GCL_nombre = bienvenida (GCL_tablero,GCL_nombre);
        GCL_numerodepartidasmax = 100;
        GCL_salida[0] = GCL_n;
        GCL_credito = 1000;
        GCL_salida[1] = GCL_credito;
      /* { true } */

        
        while (! GCL_salirjuego && GCL_salida[1] >= 5 && GCL_salida[0] < 100) {
        final int GCL___C11 = GCL_numerodepartidasmax - GCL_n;


              GCL_finmano = false;
            GCL_tablero = mostrarmesa (GCL_nombre,GCL_credito,GCL_tablero);
              GCL_apuesta = pedirapuesta(GCL_credito,GCL_nombre);
            System.out.println ("");
              GCL_credito = GCL_credito - GCL_apuesta;
              GCL_manojugador[0] = darcarta(GCL_mazo);
              GCL_manojugador[1] = darcarta(GCL_mazo);
              GCL_manocrupier[0] = darcarta(GCL_mazo);
              GCL_manocrupier[1] = darcarta(GCL_mazo);
              GCL_valormanojugador = calcularvalormano(GCL_manojugador);
            GCL_valormanocrupier = valorcarta (GCL_manocrupier,1,GCL_valormanocrupier);
            GCL_tablero = estadoinicial (GCL_manocrupier,GCL_manojugador,GCL_apuesta,GCL_credito,GCL_valormanocrupier,GCL_valormanojugador,GCL_tablero);
              GCL_opcion = 0;
              GCL_p = 2;
            /* { true } */

              
              while (! GCL_salirjuego && ! GCL_finmano && GclLib.__neq(GCL_opcion,2) && ! (GclLib.__eq(GCL_opcion,1) && GclLib.__eq(GCL_valormanojugador,21))) {
              final int GCL___C12 = 50 - GCL_w;


                    if (GclLib.__eq(GCL_valormanojugador,21)) {
 

                        GCL_tablero = dibujarcarta (GCL_manocrupier[0],- 396,60,- 306,200,GCL_tablero);
                          GCL_valormanocrupier = calcularvalormano(GCL_manocrupier);
                          if (GclLib.__eq(GCL_valormanocrupier,21)) {
 

                              GCL_tablero = actualizarmarcador (GCL_apuesta,GCL_credito,GCL_valormanocrupier,GCL_valormanojugador,GCL_nombre + " Y EL CRUPIER TIENEN BLACK JACK",GCL_tablero);
                                GCL_credito = GCL_credito + GCL_apuesta;
                                GCL_apuesta = 0;                             
                          } else {
                            assert GCL_valormanocrupier < 21 :__msg[31]; 
                            

                              GCL_tablero = actualizarmarcador (GCL_apuesta,GCL_credito,GCL_valormanocrupier,GCL_valormanojugador,GCL_nombre + " TIENE BLACK JACK!!!!",GCL_tablero);
                                GCL_credito = GCL_credito + 2 * GCL_apuesta + GclLib.__div(GCL_apuesta,2);
                                GCL_apuesta = 0;                            
                          }

                          GCL_finmano = true;                       
                    } else if (GCL_valormanojugador < 21) {
 

                          GCL_xi = - 204;
                          GCL_xf = - 114;
                        /* { true } */

                          
                          while (GCL_valormanojugador < 21 && (GclLib.__eq(GCL_opcion,0) || GclLib.__eq(GCL_opcion,1))) {
                          final int GCL___C13 = 20 - GCL_z;


                              GCL_opcion = pediropcion (GCL_opcion);
                                if (GclLib.__eq(GCL_opcion,1)) {
 

                                      GCL_manojugador[GCL_p] = darcarta(GCL_mazo);
                                      GCL_valormanojugador = calcularvalormano(GCL_manojugador);
                                    GCL_tablero = dibujarcarta (GCL_manojugador[GCL_p],GCL_xi,- 200,GCL_xf,- 60,GCL_tablero);
                                    GCL_tablero = actualizarmarcador (GCL_apuesta,GCL_credito,GCL_valormanocrupier,GCL_valormanojugador,"",GCL_tablero);
                                      GCL_p = GCL_p + 1;
                                      GCL_xi = GCL_xi + 96;
                                      GCL_xf = GCL_xf + 96;                                   
                                } else if (GclLib.__eq(GCL_opcion,2)) {
 
                                   
                                } else if (GclLib.__eq(GCL_opcion,3)) {
 

                                      if ((9 <= GCL_valormanojugador && GCL_valormanojugador <= 11) && GclLib.__eq(GCL_manojugador[2],"")) {
 

                                            if (GCL_credito >= GCL_apuesta) {
 

                                                  GCL_apuesta = 2 * GCL_apuesta;
                                                  GCL_credito = GCL_credito - GclLib.__div(GCL_apuesta,2);
                                                  GCL_manojugador[2] = darcarta(GCL_mazo);
                                                  GCL_valormanojugador = calcularvalormano(GCL_manojugador);
                                                GCL_tablero = dibujarcarta (GCL_manojugador[2],- 204,- 200,- 114,- 60,GCL_tablero);
                                                GCL_tablero = actualizarmarcador (GCL_apuesta,GCL_credito,GCL_valormanocrupier,GCL_valormanojugador,"",GCL_tablero);
                                                  GCL_opcion = 2;                                               
                                            } else {
                                              assert GCL_credito < GCL_apuesta :__msg[33]; 
                                              

                                                System.out.println ("NO posee credito suficiente para realizar esta accion");
                                                System.out.println ("");
                                                  GCL_opcion = 0;                                              
                                            }
                                         
                                      } else if ((GCL_valormanojugador < 9 || GCL_valormanojugador > 11) && GclLib.__eq(GCL_manojugador[2],"")) {
 

                                          System.out.println ("Esta opcion no esta disponible porque su mano es menor que 9 o mayor que 11");
                                          System.out.println ("");
                                            GCL_opcion = 0;                                         
                                      } else {
                                        assert GclLib.__neq(GCL_manojugador[2],"") :__msg[34]; 
                                        

                                          System.out.println ("NO puede realizar esta accion porque ya pidio una carta");
                                          System.out.println ("");
                                            GCL_opcion = 0;                                        
                                      }
                                   
                                } else {
                                  assert GclLib.__eq(GCL_opcion,4) :__msg[35]; 
                                  

                                      GCL_salirjuego = true;
                                      GCL_finmano = true;                                  
                                }

                                GCL_z = GCL_z + 1;                            
                            assert GclLib.__GT(GCL___C13,20 - GCL_z) :__msg[32]; 
                             
                          }                       
                    } else {
                      assert GCL_valormanojugador > 21 :__msg[36]; 
                      

                        GclLib.__addText (GCL_tablero,GCL_nombre + " HAS PERDIDO!!!",- 200,- 10);
                          GCL_apuesta = 0;
                          GCL_finmano = true;                      
                    }

                    GCL_w = GCL_w + 1;                
                assert GclLib.__GT(GCL___C12,50 - GCL_w) :__msg[30]; 
                 
              }
              if (! GCL_finmano) {
 

                  GCL_tablero = dibujarcarta (GCL_manocrupier[0],- 396,60,- 306,200,GCL_tablero);
                    GCL_valormanocrupier = calcularvalormano(GCL_manocrupier);
                  GCL_tablero = actualizarmarcador (GCL_apuesta,GCL_credito,GCL_valormanocrupier,GCL_valormanojugador,"",GCL_tablero);
                    GCL_terminodejugar = false;
                    GCL_xi = - 204;
                    GCL_xf = - 114;
                    GCL_p = 2;
                    GCL_z = 0;
                  /* { true } */

                    
                    while (! GCL_finmano && ! GCL_terminodejugar) {
                    final int GCL___C14 = 20 - GCL_z;


                          if (GCL_valormanocrupier < 17) {
 

                                GCL_manocrupier[GCL_p] = darcarta(GCL_mazo);
                                GCL_valormanocrupier = calcularvalormano(GCL_manocrupier);
                              GCL_tablero = dibujarcarta (GCL_manocrupier[GCL_p],GCL_xi,60,GCL_xf,200,GCL_tablero);
                              GCL_tablero = actualizarmarcador (GCL_apuesta,GCL_credito,GCL_valormanocrupier,GCL_valormanojugador,"",GCL_tablero);
                                GCL_p = GCL_p + 1;
                                GCL_xi = GCL_xi + 96;
                                GCL_xf = GCL_xf + 96;                             
                          } else if (17 <= GCL_valormanocrupier && GCL_valormanocrupier <= 21) {
 

                                GCL_terminodejugar = true;                             
                          } else {
                            assert GCL_valormanocrupier > 21 && (GclLib.__neq(GCL_opcion,3) || GclLib.__eq(GCL_opcion,3)) :__msg[38]; 
                            

                              GclLib.__addText (GCL_tablero,"EL CRUPIER HA PERDIDO Y " + GCL_nombre + " HA GANADO ESTA MANO!!!",- 200,- 10);
                                GCL_credito = GCL_credito + 2 * GCL_apuesta;
                                GCL_apuesta = 0;
                                GCL_finmano = true;                            
                          }

                          GCL_z = GCL_z + 1;                      
                      assert GclLib.__GT(GCL___C14,20 - GCL_z) :__msg[37]; 
                       
                    }                 
              } else {
                assert GCL_finmano :__msg[39]; 
                
                
              }

              GCL_n = GCL_n + 1;
              if (! GCL_finmano) {
 

                    if (GclLib.__eq(GCL_valormanocrupier,GCL_valormanojugador)) {
 

                          GCL_credito = GCL_credito + GCL_apuesta;
                          GCL_apuesta = 0;
                        GclLib.__addText (GCL_tablero,"HA HABIDO UN EMPATE!!!",- 200,- 10);                       
                    } else if (GCL_valormanocrupier < GCL_valormanojugador) {
 

                          GCL_credito = GCL_credito + 2 * GCL_apuesta;
                          GCL_apuesta = 0;
                        GclLib.__addText (GCL_tablero,GCL_nombre + " HA GANADO ESTA MANO!!!",- 200,- 10);                       
                    } else {
                      assert GCL_valormanocrupier > GCL_valormanojugador :__msg[40]; 
                      

                          GCL_apuesta = 0;
                        GclLib.__addText (GCL_tablero,"EL CRUPIER HA GANADO ESTA MANO!!!",- 200,- 10);                      
                    }

                    GCL_finmano = true;                 
              } else {
                assert GCL_finmano :__msg[41]; 
                
                
              }

            GCL_tablero = actualizarmarcador (GCL_apuesta,GCL_credito,GCL_valormanocrupier,GCL_valormanojugador,"",GCL_tablero);
            System.out.println ("");
              if (GCL_salirjuego) {
 

                  System.out.println ("Seguro que desea salir de USB-BLACKJACK? (S/N): ");
                    GCL_s = GclLib.__readString("");
                    if (GclLib.__eq(GCL_s,"s") || GclLib.__eq(GCL_s,"S") || GclLib.__eq(GCL_s,"")) {
 
                       
                    } else {
                      assert GclLib.__eq(GCL_s,"n") || GclLib.__eq(GCL_s,"N") :__msg[42]; 
                      

                          GCL_salirjuego = false;
                          GCL_credito = GCL_credito + GCL_apuesta;                      
                    }

                  System.out.println ("");                 
              } else {
                assert ! GCL_salirjuego :__msg[43]; 
                

                    GCL_s = GclLib.__readString("Pulse una tecla para continuar jugando la siguiente mano");
                  System.out.println ("");                
              }

              GCL_salida[0] = GCL_n;
              GCL_salida[1] = GCL_credito;
            GCL_salida = salidajuego (GCL_salida);
            GclLib.__eraseAll (GCL_tablero);
            GCL_manojugador = eliminarcartas (GCL_manojugador);
            GCL_manocrupier = eliminarcartas (GCL_manocrupier);          
          assert GclLib.__GT(GCL___C11,GCL_numerodepartidasmax - GCL_n) :__msg[29]; 
           
        }
  }    private final static String[] __msg = new String[] {
    "En la línea 20, los guardias son incompletos.",
    "En la línea 58, los guardias son incompletos.",
    "En la línea 74, los guardias son incompletos.",
    "En la línea 114, \nel invariante k >= 0 /\\ xi >= x1 + 25 \nno se cumple.",
    "En la línea 114, \ninvariante k >= 0 /\\ xi >= x1 + 25,\no cota 41 - k decreciente\nno se cumple.",
    "En la línea 125, \nel invariante k >= 0 /\\ xi >= x1 + 25 \nno se cumple.",
    "En la línea 125, \ninvariante k >= 0 /\\ xi >= x1 + 25,\no cota 41 - k decreciente\nno se cumple.",
    "En la línea 131, \nel invariante k >= 0 /\\ xi >= x1 + 25 \nno se cumple.",
    "En la línea 131, \ninvariante k >= 0 /\\ xi >= x1 + 25,\no cota 41 - k decreciente\nno se cumple.",
    "En la línea 145, \nel invariante k >= 0 /\\ xi >= x1 + 40 \nno se cumple.",
    "En la línea 145, \ninvariante k >= 0 /\\ xi >= x1 + 40,\no cota 11 - k decreciente\nno se cumple.",
    "En la línea 158, \nel invariante k >= 0 /\\ xi >= x1 + 25 \nno se cumple.",
    "En la línea 158, \ninvariante k >= 0 /\\ xi >= x1 + 25,\no cota 41 - k decreciente\nno se cumple.",
    "En la línea 164, \nel invariante k >= 0 /\\ xi >= x1 + 40 \nno se cumple.",
    "En la línea 164, \ninvariante k >= 0 /\\ xi >= x1 + 40,\no cota 11 - k decreciente\nno se cumple.",
    "En la línea 109, los guardias son incompletos.",
    "En la línea 182, los guardias son incompletos.",
    "En la línea 285, \nla precondición {xi >= - 400 /\\ xf >= - 400 /\\ yi >= - 250 /\\ yf >= - 250 /\\ lineas > 0} \nno se cumple.",
    "En la línea 295, \nel invariante k >= 0 \nno se cumple.",
    "En la línea 295, \ninvariante k >= 0,\no cota lineas + 1 - k decreciente\nno se cumple.",
    "En la línea 395, \nel invariante k >= 0 \nno se cumple.",
    "En la línea 395, \ninvariante k >= 0,\no cota 100 - k decreciente\nno se cumple.",
    "En la línea 399, los guardias son incompletos.",
    "En la línea 424, \ninvariante true,\no cota 8 - k decreciente\nno se cumple.",
    "En la línea 446, \ninvariante true,\no cota 10 - k decreciente\nno se cumple.",
    "En la línea 451, los guardias son incompletos.",
    "En la línea 466, \ninvariante true,\no cota 8 - k decreciente\nno se cumple.",
    "En la línea 477, los guardias son incompletos.",
    "En la línea 482, los guardias son incompletos.",
    "En la línea 534, \ninvariante true,\no cota numerodepartidasmax - n decreciente\nno se cumple.",
    "En la línea 567, \ninvariante true,\no cota 50 - w decreciente\nno se cumple.",
    "En la línea 573, los guardias son incompletos.",
    "En la línea 583, \ninvariante true,\no cota 20 - z decreciente\nno se cumple.",
    "En la línea 596, los guardias son incompletos.",
    "En la línea 595, los guardias son incompletos.",
    "En la línea 587, los guardias son incompletos.",
    "En la línea 570, los guardias son incompletos.",
    "En la línea 640, \ninvariante true,\no cota 20 - z decreciente\nno se cumple.",
    "En la línea 643, los guardias son incompletos.",
    "En la línea 633, los guardias son incompletos.",
    "En la línea 665, los guardias son incompletos.",
    "En la línea 664, los guardias son incompletos.",
    "En la línea 689, los guardias son incompletos.",
    "En la línea 686, los guardias son incompletos."
  };
     
    /** Maximal integer */  
    private static final int GCL_MAX_INT = Integer.MAX_VALUE;   
    /** Minimal integer */   private static final int  GCL_MIN_INT = Integer.MIN_VALUE;  
    /** Maximal double */  
    private static final double GCL_MAX_DOUBLE = Double.MAX_VALUE;   
    /** Minimal double */      
    private static final double  GCL_MIN_DOUBLE = Double.MIN_VALUE;   
  }
   
